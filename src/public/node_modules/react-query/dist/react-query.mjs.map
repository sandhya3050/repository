{"version":3,"file":"react-query.mjs","sources":["../src/core/types.ts","../src/core/utils.ts","../src/core/config.ts","../src/core/queryInstance.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/setFocusHandler.ts","../src/react/ReactQueryCacheProvider.tsx","../src/react/ReactQueryConfigProvider.tsx","../src/react/utils.ts","../src/react/useIsFetching.ts","../src/react/useMutation.ts","../src/react/useBaseQuery.ts","../src/react/useQueryArgs.ts","../src/react/useQuery.ts","../src/react/usePaginatedQuery.ts","../src/react/useInfiniteQuery.ts"],"sourcesContent":["import { Query, FetchMoreOptions } from './query'\n\nexport type QueryKeyObject =\n  | object\n  | { [key: string]: QueryKey }\n  | { [key: number]: QueryKey }\n\nexport type QueryKeyPrimitive = string | boolean | number | null | undefined\n\nexport type QueryKeyWithoutObjectAndArray = QueryKeyPrimitive\n\nexport type QueryKeyWithoutObject =\n  | QueryKeyWithoutObjectAndArray\n  | readonly QueryKey[]\n\nexport type QueryKeyWithoutArray =\n  | QueryKeyWithoutObjectAndArray\n  | QueryKeyObject\n\nexport type QueryKey = QueryKeyWithoutObject | QueryKeyObject\n\nexport type ArrayQueryKey = QueryKey[]\n\nexport type QueryFunction<TResult> = (\n  ...args: any[]\n) => TResult | Promise<TResult>\n\n// The tuple variants are only to infer types in the public API\nexport type TupleQueryKey = readonly [QueryKey, ...QueryKey[]]\n\nexport type TupleQueryFunction<TResult, TKey extends TupleQueryKey> = (\n  ...args: TKey\n) => TResult | Promise<TResult>\n\nexport type InitialDataFunction<TResult> = () => TResult | undefined\n\nexport type InitialStaleFunction = () => boolean\n\nexport type QueryKeySerializerFunction = (\n  queryKey: QueryKey\n) => [string, QueryKey[]]\n\nexport interface BaseQueryConfig<TResult, TError = unknown> {\n  /**\n   * Set this to `false` to disable automatic refetching when the query mounts or changes query keys.\n   * To refetch the query, use the `refetch` method returned from the `useQuery` instance.\n   */\n  enabled?: boolean | unknown\n  /**\n   * If `false`, failed queries will not retry by default.\n   * If `true`, failed queries will retry infinitely., failureCount: num\n   * If set to an integer number, e.g. 3, failed queries will retry until the failed query count meets that number.\n   * If set to a function `(failureCount, error) => boolean` failed queries will retry until the function returns false.\n   */\n  retry?: boolean | number | ((failureCount: number, error: TError) => boolean)\n  retryDelay?: number | ((retryAttempt: number) => number)\n  staleTime?: number\n  cacheTime?: number\n  refetchInterval?: false | number\n  refetchIntervalInBackground?: boolean\n  refetchOnWindowFocus?: boolean\n  refetchOnMount?: boolean\n  onSuccess?: (data: TResult) => void\n  onError?: (err: TError) => void\n  onSettled?: (data: TResult | undefined, error: TError | null) => void\n  isDataEqual?: (oldData: unknown, newData: unknown) => boolean\n  useErrorBoundary?: boolean\n  queryFn?: QueryFunction<TResult>\n  queryKeySerializerFn?: QueryKeySerializerFunction\n  queryFnParamsFilter?: (args: ArrayQueryKey) => ArrayQueryKey\n  suspense?: boolean\n  initialData?: TResult | InitialDataFunction<TResult>\n  initialStale?: boolean | InitialStaleFunction\n  infinite?: true\n}\n\nexport interface QueryConfig<TResult, TError = unknown>\n  extends BaseQueryConfig<TResult, TError> {}\n\nexport interface PaginatedQueryConfig<TResult, TError = unknown>\n  extends BaseQueryConfig<TResult, TError> {}\n\nexport interface InfiniteQueryConfig<TResult, TError = unknown>\n  extends BaseQueryConfig<TResult[], TError> {\n  getFetchMore: (lastPage: TResult, allPages: TResult[]) => unknown\n}\n\nexport type IsFetchingMoreValue = 'previous' | 'next' | false\n\nexport enum QueryStatus {\n  Idle = 'idle',\n  Loading = 'loading',\n  Error = 'error',\n  Success = 'success',\n}\n\nexport interface QueryResultBase<TResult, TError = unknown> {\n  status: QueryStatus\n  error: TError | null\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n  isIdle: boolean\n  isFetching: boolean\n  isStale: boolean\n  failureCount: number\n  query: Query<TResult, TError>\n  updatedAt: number\n  refetch: () => Promise<void>\n  clear: () => void\n}\n\nexport interface QueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult, TError> {\n  data: TResult | undefined\n}\n\nexport interface PaginatedQueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult, TError> {\n  resolvedData: TResult | undefined\n  latestData: TResult | undefined\n}\n\nexport interface InfiniteQueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult[], TError> {\n  data: TResult[] | undefined\n  isFetchingMore?: IsFetchingMoreValue\n  canFetchMore: boolean | undefined\n  fetchMore: (\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ) => Promise<TResult[] | undefined> | undefined\n}\n\nexport interface MutateConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> {\n  onSuccess?: (data: TResult, variables: TVariables) => Promise<void> | void\n  onError?: (\n    error: TError,\n    variables: TVariables,\n    snapshotValue: TSnapshot\n  ) => Promise<void> | void\n  onSettled?: (\n    data: undefined | TResult,\n    error: TError | null,\n    variables: TVariables,\n    snapshotValue?: TSnapshot\n  ) => Promise<void> | void\n  throwOnError?: boolean\n}\n\nexport interface MutationConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> extends MutateConfig<TResult, TError, TVariables, TSnapshot> {\n  onMutate?: (variables: TVariables) => Promise<TSnapshot> | TSnapshot\n  useErrorBoundary?: boolean\n  suspense?: boolean\n}\n\nexport type MutationFunction<TResult, TVariables = unknown> = (\n  variables: TVariables\n) => Promise<TResult>\n\nexport type MutateFunction<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> = (\n  variables?: TVariables,\n  config?: MutateConfig<TResult, TError, TVariables, TSnapshot>\n) => Promise<TResult | undefined>\n\nexport type MutationResultPair<TResult, TError, TVariables, TSnapshot> = [\n  MutateFunction<TResult, TError, TVariables, TSnapshot>,\n  MutationResult<TResult, TError>\n]\n\nexport interface MutationResult<TResult, TError = unknown> {\n  status: QueryStatus\n  data: TResult | undefined\n  error: TError | null\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n  reset: () => void\n}\n\nexport interface ReactQueryConfig<TResult = unknown, TError = unknown> {\n  queries?: ReactQueryQueriesConfig<TResult, TError>\n  shared?: ReactQuerySharedConfig\n  mutations?: ReactQueryMutationsConfig<TResult, TError>\n}\n\nexport interface ReactQuerySharedConfig {\n  suspense?: boolean\n}\n\nexport interface ReactQueryQueriesConfig<TResult, TError>\n  extends BaseQueryConfig<TResult, TError> {}\n\nexport interface ReactQueryMutationsConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> extends MutationConfig<TResult, TError, TVariables, TSnapshot> {}\n","import { QueryConfig, QueryStatus, QueryKey, QueryFunction } from './types'\n\n// TYPES\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\ntype ConsoleFunction = (...args: any[]) => void\n\nexport interface ConsoleObject {\n  log: ConsoleFunction\n  warn: ConsoleFunction\n  error: ConsoleFunction\n}\n\n// UTILS\n\nlet _uid = 0\nexport const uid = () => _uid++\nexport const cancelledError = {}\nexport const globalStateListeners = []\nexport const isServer = typeof window === 'undefined'\nexport function noop(): void {\n  return void 0\n}\nexport function identity<T>(d: T): T {\n  return d\n}\nexport let Console: ConsoleObject = console || {\n  error: noop,\n  warn: noop,\n  log: noop,\n}\n\nexport function setConsole(c: ConsoleObject) {\n  Console = c\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nfunction stableStringifyReplacer(_key: string, value: any): unknown {\n  if (typeof value === 'function') {\n    throw new Error('Cannot stringify non JSON value')\n  }\n\n  if (isObject(value)) {\n    return Object.keys(value)\n      .sort()\n      .reduce((result, key) => {\n        result[key] = value[key]\n        return result\n      }, {} as any)\n  }\n\n  return value\n}\n\nexport function stableStringify(value: any): string {\n  return JSON.stringify(value, stableStringifyReplacer)\n}\n\nexport function isObject(a: unknown): boolean {\n  return a && typeof a === 'object' && !Array.isArray(a)\n}\n\nexport function deepIncludes(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (typeof a === 'object') {\n    return !Object.keys(b).some(key => !deepIncludes(a[key], b[key]))\n  }\n\n  return false\n}\n\nexport function isDocumentVisible(): boolean {\n  // document global can be unavailable in react native\n  if (typeof document === 'undefined') {\n    return true\n  }\n  return [undefined, 'visible', 'prerender'].includes(document.visibilityState)\n}\n\nexport function isOnline(): boolean {\n  return navigator.onLine === undefined || navigator.onLine\n}\n\nexport function getQueryArgs<TResult, TError, TOptions = undefined>(\n  args: any[]\n): [QueryKey, QueryConfig<TResult, TError>, TOptions] {\n  let queryKey: QueryKey\n  let queryFn: QueryFunction<TResult> | undefined\n  let config: QueryConfig<TResult, TError> | undefined\n  let options: TOptions\n\n  if (isObject(args[0])) {\n    queryKey = args[0].queryKey\n    queryFn = args[0].queryFn\n    config = args[0].config\n    options = args[1]\n  } else if (isObject(args[1])) {\n    queryKey = args[0]\n    config = args[1]\n    options = args[2]\n  } else {\n    queryKey = args[0]\n    queryFn = args[1]\n    config = args[2]\n    options = args[3]\n  }\n\n  config = config || {}\n\n  if (queryFn) {\n    config = { ...config, queryFn }\n  }\n\n  return [queryKey, config, options]\n}\n\nexport function deepEqual(a: any, b: any): boolean {\n  return equal(a, b, true)\n}\n\nexport function shallowEqual(a: any, b: any): boolean {\n  return equal(a, b, false)\n}\n\n// This deep-equal is directly based on https://github.com/epoberezkin/fast-deep-equal.\n// The parts for comparing any non-JSON-supported values has been removed\nfunction equal(a: any, b: any, deep: boolean, depth = 0): boolean {\n  if (a === b) return true\n\n  if (\n    (deep || !depth) &&\n    a &&\n    b &&\n    typeof a == 'object' &&\n    typeof b == 'object'\n  ) {\n    let length, i\n    if (Array.isArray(a)) {\n      length = a.length\n      // eslint-disable-next-line eqeqeq\n      if (length != b.length) return false\n      for (i = length; i-- !== 0; )\n        if (!equal(a[i], b[i], deep, depth + 1)) return false\n      return true\n    }\n\n    if (a.valueOf !== Object.prototype.valueOf)\n      return a.valueOf() === b.valueOf()\n\n    const keys = Object.keys(a)\n    length = keys.length\n    if (length !== Object.keys(b).length) return false\n\n    for (i = length; i-- !== 0; )\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false\n\n    for (i = length; i-- !== 0; ) {\n      const key = keys[i]\n\n      if (!equal(a[key], b[key], deep, depth + 1)) return false\n    }\n\n    return true\n  }\n\n  // true if both NaN, false otherwise\n  // eslint-disable-next-line no-self-compare\n  return a !== a && b !== b\n}\n\nexport function getStatusProps<T extends QueryStatus>(status: T) {\n  return {\n    status,\n    isLoading: status === QueryStatus.Loading,\n    isSuccess: status === QueryStatus.Success,\n    isError: status === QueryStatus.Error,\n    isIdle: status === QueryStatus.Idle,\n  }\n}\n","import { stableStringify, identity, deepEqual } from './utils'\nimport {\n  ArrayQueryKey,\n  QueryKey,\n  QueryKeySerializerFunction,\n  ReactQueryConfig,\n} from './types'\n\n// TYPES\n\nexport interface ReactQueryConfigRef {\n  current: ReactQueryConfig\n}\n\n// CONFIG\n\nexport const defaultQueryKeySerializerFn: QueryKeySerializerFunction = (\n  queryKey: QueryKey\n): [string, ArrayQueryKey] => {\n  try {\n    let arrayQueryKey: ArrayQueryKey = Array.isArray(queryKey)\n      ? queryKey\n      : [queryKey]\n    const queryHash = stableStringify(arrayQueryKey)\n    arrayQueryKey = JSON.parse(queryHash)\n    return [queryHash, arrayQueryKey]\n  } catch {\n    throw new Error('A valid query key is required!')\n  }\n}\n\nexport const DEFAULT_CONFIG: ReactQueryConfig = {\n  shared: {\n    suspense: false,\n  },\n  queries: {\n    queryKeySerializerFn: defaultQueryKeySerializerFn,\n    enabled: true,\n    retry: 3,\n    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\n    staleTime: 0,\n    cacheTime: 5 * 60 * 1000,\n    refetchOnWindowFocus: true,\n    refetchInterval: false,\n    queryFnParamsFilter: identity,\n    refetchOnMount: true,\n    isDataEqual: deepEqual,\n    useErrorBoundary: false,\n  },\n  mutations: {\n    throwOnError: false,\n    useErrorBoundary: false,\n  },\n}\n\nexport const defaultConfigRef: ReactQueryConfigRef = {\n  current: DEFAULT_CONFIG,\n}\n","import { uid, isServer, isDocumentVisible, Console } from './utils'\nimport { Query, QueryState, Action, ActionType } from './query'\nimport { BaseQueryConfig } from './types'\n\n// TYPES\n\nexport type OnStateUpdateFunction<TResult, TError> = (\n  state: QueryState<TResult, TError>\n) => void\n\n// CLASS\n\nexport class QueryInstance<TResult, TError> {\n  id: number\n  config: BaseQueryConfig<TResult, TError>\n\n  private query: Query<TResult, TError>\n  private refetchIntervalId?: number\n  private stateUpdateListener?: OnStateUpdateFunction<TResult, TError>\n\n  constructor(\n    query: Query<TResult, TError>,\n    onStateUpdate?: OnStateUpdateFunction<TResult, TError>\n  ) {\n    this.id = uid()\n    this.stateUpdateListener = onStateUpdate\n    this.query = query\n    this.config = {}\n  }\n\n  clearInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  updateConfig(config: BaseQueryConfig<TResult, TError>): void {\n    const oldConfig = this.config\n\n    // Update the config\n    this.config = config\n\n    if (!isServer) {\n      if (oldConfig?.refetchInterval === config.refetchInterval) {\n        return\n      }\n\n      this.query.clearIntervals()\n\n      const minInterval = Math.min(\n        ...this.query.instances.map(d => d.config.refetchInterval || Infinity)\n      )\n\n      if (\n        !this.refetchIntervalId &&\n        minInterval > 0 &&\n        minInterval < Infinity\n      ) {\n        this.refetchIntervalId = setInterval(() => {\n          if (\n            this.query.instances.some(d => d.config.enabled) &&\n            (isDocumentVisible() ||\n              this.query.instances.some(\n                d => d.config.refetchIntervalInBackground\n              ))\n          ) {\n            this.query.fetch()\n          }\n        }, minInterval)\n      }\n    }\n  }\n\n  async run(): Promise<void> {\n    try {\n      // Perform the refetch for this query if necessary\n      if (\n        this.query.instances.some(d => d.config.enabled) && // Don't auto refetch if disabled\n        !(this.config.suspense && this.query.state.isFetched) && // Don't refetch if in suspense mode and the data is already fetched\n        this.query.state.isStale && // Only refetch if stale\n        (this.config.refetchOnMount || this.query.instances.length === 1)\n      ) {\n        await this.query.fetch()\n      }\n    } catch (error) {\n      Console.error(error)\n    }\n  }\n\n  unsubscribe(preventGC?: boolean): void {\n    this.query.instances = this.query.instances.filter(d => d.id !== this.id)\n\n    if (!this.query.instances.length) {\n      this.clearInterval()\n      this.query.cancel()\n\n      if (!preventGC && !isServer) {\n        // Schedule garbage collection\n        this.query.scheduleGarbageCollection()\n      }\n    }\n  }\n\n  onStateUpdate(\n    state: QueryState<TResult, TError>,\n    action: Action<TResult, TError>\n  ): void {\n    if (action.type === ActionType.Success && state.isSuccess) {\n      this.config.onSuccess?.(state.data!)\n      this.config.onSettled?.(state.data!, null)\n    }\n\n    if (action.type === ActionType.Error && state.isError) {\n      this.config.onError?.(state.error!)\n      this.config.onSettled?.(undefined, state.error!)\n    }\n\n    this.stateUpdateListener?.(state)\n  }\n}\n","import {\n  isServer,\n  functionalUpdate,\n  cancelledError,\n  isDocumentVisible,\n  noop,\n  Console,\n  getStatusProps,\n  shallowEqual,\n  Updater,\n} from './utils'\nimport { QueryInstance, OnStateUpdateFunction } from './queryInstance'\nimport {\n  ArrayQueryKey,\n  InfiniteQueryConfig,\n  InitialDataFunction,\n  IsFetchingMoreValue,\n  QueryConfig,\n  QueryFunction,\n  QueryStatus,\n} from './types'\nimport { QueryCache } from './queryCache'\n\n// TYPES\n\ninterface QueryInitConfig<TResult, TError> {\n  queryCache: QueryCache\n  queryKey: ArrayQueryKey\n  queryHash: string\n  config: QueryConfig<TResult, TError>\n  notifyGlobalListeners: (query: Query<TResult, TError>) => void\n}\n\nexport interface QueryState<TResult, TError> {\n  canFetchMore?: boolean\n  data?: TResult\n  error: TError | null\n  failureCount: number\n  isError: boolean\n  isFetched: boolean\n  isFetching: boolean\n  isFetchingMore?: IsFetchingMoreValue\n  isIdle: boolean\n  isLoading: boolean\n  isStale: boolean\n  isSuccess: boolean\n  status: QueryStatus\n  throwInErrorBoundary?: boolean\n  updatedAt: number\n}\n\ninterface FetchOptions {\n  fetchMore?: FetchMoreOptions\n}\n\nexport interface FetchMoreOptions {\n  fetchMoreVariable?: unknown\n  previous: boolean\n}\n\nexport enum ActionType {\n  Failed = 'Failed',\n  MarkStale = 'MarkStale',\n  Fetch = 'Fetch',\n  Success = 'Success',\n  Error = 'Error',\n  SetState = 'SetState',\n}\n\ninterface FailedAction {\n  type: ActionType.Failed\n}\n\ninterface MarkStaleAction {\n  type: ActionType.MarkStale\n}\n\ninterface FetchAction {\n  type: ActionType.Fetch\n}\n\ninterface SuccessAction<TResult> {\n  type: ActionType.Success\n  updater: Updater<TResult | undefined, TResult>\n  isStale: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: ActionType.Error\n  cancelled: boolean\n  error: TError\n}\n\ninterface SetStateAction<TResult, TError> {\n  type: ActionType.SetState\n  updater: Updater<QueryState<TResult, TError>, QueryState<TResult, TError>>\n}\n\nexport type Action<TResult, TError> =\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | MarkStaleAction\n  | SetStateAction<TResult, TError>\n  | SuccessAction<TResult>\n\n// CLASS\n\nexport class Query<TResult, TError> {\n  queryCache: QueryCache\n  queryKey: ArrayQueryKey\n  queryHash: string\n  config: QueryConfig<TResult, TError>\n  instances: QueryInstance<TResult, TError>[]\n  state: QueryState<TResult, TError>\n  shouldContinueRetryOnFocus?: boolean\n  promise?: Promise<TResult | undefined>\n\n  private fetchMoreVariable?: unknown\n  private pageVariables?: ArrayQueryKey[]\n  private cacheTimeout?: number\n  private retryTimeout?: number\n  private staleTimeout?: number\n  private cancelPromises?: () => void\n  private cancelled?: typeof cancelledError | null\n  private notifyGlobalListeners: (query: Query<TResult, TError>) => void\n\n  constructor(init: QueryInitConfig<TResult, TError>) {\n    this.config = init.config\n    this.queryCache = init.queryCache\n    this.queryKey = init.queryKey\n    this.queryHash = init.queryHash\n    this.notifyGlobalListeners = init.notifyGlobalListeners\n    this.instances = []\n    this.state = getDefaultState(init.config)\n\n    if (init.config.infinite) {\n      const infiniteConfig = init.config as InfiniteQueryConfig<TResult, TError>\n      const infiniteData = (this.state.data as unknown) as TResult[] | undefined\n\n      if (\n        typeof infiniteData !== 'undefined' &&\n        typeof this.state.canFetchMore === 'undefined'\n      ) {\n        this.fetchMoreVariable = infiniteConfig.getFetchMore(\n          infiniteData[infiniteData.length - 1],\n          infiniteData\n        )\n        this.state.canFetchMore = Boolean(this.fetchMoreVariable)\n      }\n\n      // Here we seed the pageVariables for the query\n      if (!this.pageVariables) {\n        this.pageVariables = [[...this.queryKey]]\n      }\n    }\n  }\n\n  private dispatch(action: Action<TResult, TError>): void {\n    const newState = queryReducer(this.state, action)\n\n    // Only update state if something has changed\n    if (!shallowEqual(this.state, newState)) {\n      this.state = newState\n      this.instances.forEach(d => d.onStateUpdate(newState, action))\n      this.notifyGlobalListeners(this)\n    }\n  }\n\n  scheduleStaleTimeout(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearStaleTimeout()\n\n    if (this.state.isStale) {\n      return\n    }\n\n    if (this.config.staleTime === Infinity) {\n      return\n    }\n\n    this.staleTimeout = setTimeout(() => {\n      this.invalidate()\n    }, this.config.staleTime)\n  }\n\n  invalidate(): void {\n    this.clearStaleTimeout()\n\n    if (!this.queryCache.queries[this.queryHash]) {\n      return\n    }\n\n    if (this.state.isStale) {\n      return\n    }\n\n    this.dispatch({ type: ActionType.MarkStale })\n  }\n\n  scheduleGarbageCollection(): void {\n    this.clearCacheTimeout()\n\n    if (!this.queryCache.queries[this.queryHash]) {\n      return\n    }\n\n    if (this.config.cacheTime === Infinity) {\n      return\n    }\n\n    this.cacheTimeout = setTimeout(\n      () => {\n        this.clear()\n      },\n      typeof this.state.data === 'undefined' &&\n        this.state.status !== QueryStatus.Error\n        ? 0\n        : this.config.cacheTime\n    )\n  }\n\n  async refetch(): Promise<void> {\n    try {\n      await this.fetch()\n    } catch (error) {\n      Console.error(error)\n    }\n  }\n\n  heal(): void {\n    // Stop the query from being garbage collected\n    this.clearCacheTimeout()\n\n    // Mark the query as not cancelled\n    this.cancelled = null\n  }\n\n  cancel(): void {\n    this.cancelled = cancelledError\n\n    if (this.cancelPromises) {\n      this.cancelPromises()\n    }\n\n    delete this.promise\n  }\n\n  clearIntervals(): void {\n    this.instances.forEach(instance => {\n      instance.clearInterval()\n    })\n  }\n\n  private clearStaleTimeout() {\n    if (this.staleTimeout) {\n      clearTimeout(this.staleTimeout)\n      this.staleTimeout = undefined\n    }\n  }\n\n  private clearCacheTimeout() {\n    if (this.cacheTimeout) {\n      clearTimeout(this.cacheTimeout)\n      this.cacheTimeout = undefined\n    }\n  }\n\n  private clearRetryTimeout() {\n    if (this.retryTimeout) {\n      clearTimeout(this.retryTimeout)\n      this.retryTimeout = undefined\n    }\n  }\n\n  private setState(\n    updater: Updater<QueryState<TResult, TError>, QueryState<TResult, TError>>\n  ): void {\n    this.dispatch({ type: ActionType.SetState, updater })\n  }\n\n  setData(updater: Updater<TResult | undefined, TResult>): void {\n    const isStale = this.config.staleTime === 0\n    // Set data and mark it as cached\n    this.dispatch({\n      type: ActionType.Success,\n      updater,\n      isStale,\n    })\n\n    if (!isStale) {\n      // Schedule a fresh invalidation!\n      this.scheduleStaleTimeout()\n    }\n  }\n\n  clear(): void {\n    this.clearStaleTimeout()\n    this.clearCacheTimeout()\n    this.clearRetryTimeout()\n    this.clearIntervals()\n    this.cancel()\n    delete this.queryCache.queries[this.queryHash]\n    this.notifyGlobalListeners(this)\n  }\n\n  subscribe(\n    onStateUpdate?: OnStateUpdateFunction<TResult, TError>\n  ): QueryInstance<TResult, TError> {\n    const instance = new QueryInstance(this, onStateUpdate)\n    this.instances.push(instance)\n    this.heal()\n    return instance\n  }\n\n  // Set up the core fetcher function\n  private async tryFetchData(\n    fn: QueryFunction<TResult>,\n    args: ArrayQueryKey\n  ): Promise<TResult> {\n    try {\n      // Perform the query\n      const promiseOrValue = fn(...this.config.queryFnParamsFilter!(args))\n\n      this.cancelPromises = () => (promiseOrValue as any)?.cancel?.()\n\n      const data = await promiseOrValue\n      delete this.shouldContinueRetryOnFocus\n\n      delete this.cancelPromises\n      if (this.cancelled) throw this.cancelled\n\n      return data\n    } catch (error) {\n      delete this.cancelPromises\n      if (this.cancelled) throw this.cancelled\n\n      // Do we need to retry the request?\n      if (\n        this.config.retry === true ||\n        this.state.failureCount < this.config.retry! ||\n        (typeof this.config.retry === 'function' &&\n          this.config.retry(this.state.failureCount, error))\n      ) {\n        // If we retry, increase the failureCount\n        this.dispatch({ type: ActionType.Failed })\n\n        // Only retry if the document is visible\n        if (!isDocumentVisible()) {\n          // set this flag to continue retries on focus\n          this.shouldContinueRetryOnFocus = true\n          // Resolve a\n          return new Promise(noop)\n        }\n\n        delete this.shouldContinueRetryOnFocus\n\n        // Determine the retryDelay\n        const delay = functionalUpdate(\n          this.config.retryDelay,\n          this.state.failureCount\n        )\n\n        // Return a new promise with the retry\n        return await new Promise((resolve, reject) => {\n          // Keep track of the retry timeout\n          this.retryTimeout = setTimeout(async () => {\n            if (this.cancelled) return reject(this.cancelled)\n\n            try {\n              const data = await this.tryFetchData(fn, args)\n              if (this.cancelled) return reject(this.cancelled)\n              resolve(data)\n            } catch (error) {\n              if (this.cancelled) return reject(this.cancelled)\n              reject(error)\n            }\n          }, delay)\n        })\n      }\n\n      throw error\n    }\n  }\n\n  async fetch(options?: FetchOptions): Promise<TResult | undefined> {\n    let queryFn = this.config.queryFn\n\n    if (!queryFn) {\n      return\n    }\n\n    // If we are already fetching, return current promise\n    if (this.promise) {\n      return this.promise\n    }\n\n    if (this.config.infinite) {\n      const infiniteConfig = this.config as InfiniteQueryConfig<TResult, TError>\n      const infiniteData = (this.state.data as unknown) as TResult[] | undefined\n      const fetchMore = options?.fetchMore\n\n      const originalQueryFn = queryFn\n\n      queryFn = async () => {\n        const data: TResult[] = []\n        const pageVariables = this.pageVariables ? [...this.pageVariables] : []\n        const rebuiltPageVariables: ArrayQueryKey[] = []\n\n        do {\n          const args = pageVariables.shift()!\n\n          if (!data.length) {\n            // the first page query doesn't need to be rebuilt\n            data.push(await originalQueryFn(...args))\n            rebuiltPageVariables.push(args)\n          } else {\n            // get an up-to-date cursor based on the previous data set\n\n            const nextCursor = infiniteConfig.getFetchMore(\n              data[data.length - 1],\n              data\n            )\n\n            // break early if there's no next cursor\n            // otherwise we'll start from the beginning\n            // which will cause unwanted duplication\n            if (!nextCursor) {\n              break\n            }\n\n            const pageArgs = [\n              // remove the last argument (the previously saved cursor)\n              ...args.slice(0, -1),\n              nextCursor,\n            ] as ArrayQueryKey\n\n            data.push(await originalQueryFn(...pageArgs))\n            rebuiltPageVariables.push(pageArgs)\n          }\n        } while (pageVariables.length)\n\n        this.fetchMoreVariable = infiniteConfig.getFetchMore(\n          data[data.length - 1],\n          data\n        )\n        this.state.canFetchMore = Boolean(this.fetchMoreVariable)\n        this.pageVariables = rebuiltPageVariables\n\n        return (data as unknown) as TResult\n      }\n\n      if (fetchMore) {\n        queryFn = async (...args: ArrayQueryKey) => {\n          try {\n            const { fetchMoreVariable, previous } = fetchMore\n\n            this.setState(old => ({\n              ...old,\n              isFetchingMore: previous ? 'previous' : 'next',\n            }))\n\n            const newArgs = [...args, fetchMoreVariable] as ArrayQueryKey\n\n            if (this.pageVariables) {\n              this.pageVariables[previous ? 'unshift' : 'push'](newArgs)\n            } else {\n              this.pageVariables = [newArgs]\n            }\n\n            const newData = await originalQueryFn(...newArgs)\n\n            let data\n\n            if (!infiniteData) {\n              data = [newData]\n            } else if (previous) {\n              data = [newData, ...infiniteData]\n            } else {\n              data = [...infiniteData, newData]\n            }\n\n            this.fetchMoreVariable = infiniteConfig.getFetchMore(newData, data)\n            this.state.canFetchMore = Boolean(this.fetchMoreVariable)\n\n            return (data as unknown) as TResult\n          } finally {\n            this.setState(old => ({\n              ...old,\n              isFetchingMore: false,\n            }))\n          }\n        }\n      }\n    }\n\n    this.promise = (async () => {\n      // If there are any retries pending for this query, kill them\n      this.cancelled = null\n\n      try {\n        // Set up the query refreshing state\n        this.dispatch({ type: ActionType.Fetch })\n\n        // Try to get the data\n        const data = await this.tryFetchData(queryFn!, this.queryKey)\n\n        this.setData(old => (this.config.isDataEqual!(old, data) ? old! : data))\n\n        delete this.promise\n\n        return data\n      } catch (error) {\n        this.dispatch({\n          type: ActionType.Error,\n          cancelled: error === this.cancelled,\n          error,\n        })\n\n        delete this.promise\n\n        if (error !== this.cancelled) {\n          throw error\n        }\n\n        return\n      }\n    })()\n\n    return this.promise\n  }\n\n  fetchMore(\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ): Promise<TResult | undefined> {\n    return this.fetch({\n      fetchMore: {\n        fetchMoreVariable: fetchMoreVariable ?? this.fetchMoreVariable,\n        previous: options?.previous || false,\n      },\n    })\n  }\n}\n\nfunction getDefaultState<TResult, TError>(\n  config: QueryConfig<TResult, TError>\n): QueryState<TResult, TError> {\n  const initialData =\n    typeof config.initialData === 'function'\n      ? (config.initialData as InitialDataFunction<TResult>)()\n      : config.initialData\n\n  const hasInitialData = typeof initialData !== 'undefined'\n\n  const isStale =\n    !config.enabled ||\n    (typeof config.initialStale === 'function'\n      ? config.initialStale()\n      : config.initialStale ?? !hasInitialData)\n\n  const initialStatus = hasInitialData\n    ? QueryStatus.Success\n    : config.enabled\n    ? QueryStatus.Loading\n    : QueryStatus.Idle\n\n  return {\n    ...getStatusProps(initialStatus),\n    error: null,\n    isFetched: false,\n    isFetching: initialStatus === QueryStatus.Loading,\n    failureCount: 0,\n    isStale,\n    data: initialData,\n    updatedAt: hasInitialData ? Date.now() : 0,\n  }\n}\n\nexport function queryReducer<TResult, TError>(\n  state: QueryState<TResult, TError>,\n  action: Action<TResult, TError>\n): QueryState<TResult, TError> {\n  switch (action.type) {\n    case ActionType.Failed:\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case ActionType.MarkStale:\n      return {\n        ...state,\n        isStale: true,\n      }\n    case ActionType.Fetch:\n      const status =\n        typeof state.data !== 'undefined'\n          ? QueryStatus.Success\n          : QueryStatus.Loading\n      return {\n        ...state,\n        ...getStatusProps(status),\n        isFetching: true,\n        failureCount: 0,\n      }\n    case ActionType.Success:\n      return {\n        ...state,\n        ...getStatusProps(QueryStatus.Success),\n        data: functionalUpdate(action.updater, state.data),\n        error: null,\n        isStale: action.isStale,\n        isFetched: true,\n        isFetching: false,\n        updatedAt: Date.now(),\n        failureCount: 0,\n      }\n    case ActionType.Error:\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n        isFetched: true,\n        isFetching: false,\n        isStale: true,\n        ...(!action.cancelled && {\n          ...getStatusProps(QueryStatus.Error),\n          error: action.error,\n          throwInErrorBoundary: true,\n        }),\n      }\n    case ActionType.SetState:\n      return functionalUpdate(action.updater, state)\n    default:\n      return state\n  }\n}\n","import {\n  isServer,\n  getQueryArgs,\n  deepIncludes,\n  Console,\n  isObject,\n  Updater,\n} from './utils'\nimport { defaultConfigRef, ReactQueryConfigRef } from './config'\nimport { Query } from './query'\nimport {\n  QueryConfig,\n  QueryKey,\n  QueryKeyWithoutObject,\n  ReactQueryConfig,\n  QueryKeyWithoutArray,\n  QueryKeyWithoutObjectAndArray,\n  TupleQueryFunction,\n  TupleQueryKey,\n} from './types'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  frozen?: boolean\n  defaultConfig?: ReactQueryConfig\n}\n\ninterface ClearOptions {\n  notify?: boolean\n}\n\ninterface PrefetchQueryOptions {\n  force?: boolean\n  throwOnError?: boolean\n}\n\ninterface InvalidateQueriesOptions extends QueryPredicateOptions {\n  refetchActive?: boolean\n  refetchInactive?: boolean\n  throwOnError?: boolean\n}\n\ninterface QueryPredicateOptions {\n  exact?: boolean\n}\n\ntype QueryPredicate = QueryKey | QueryPredicateFn | true\n\ntype QueryPredicateFn = (query: Query<unknown, unknown>) => boolean\n\nexport interface PrefetchQueryObjectConfig<\n  TResult,\n  TError,\n  TKey extends TupleQueryKey\n> {\n  queryKey: QueryKey\n  queryFn?: TupleQueryFunction<TResult, TKey>\n  config?: QueryConfig<TResult, TError>\n  options?: PrefetchQueryOptions\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any>\n}\n\ntype QueryCacheListener = (\n  cache: QueryCache,\n  query?: Query<unknown, unknown>\n) => void\n\n// CLASS\n\nexport class QueryCache {\n  queries: QueryHashMap\n  isFetching: number\n\n  private config: QueryCacheConfig\n  private configRef: ReactQueryConfigRef\n  private globalListeners: QueryCacheListener[]\n\n  constructor(config?: QueryCacheConfig) {\n    this.config = config || {}\n\n    // A frozen cache does not add new queries to the cache\n    this.globalListeners = []\n\n    this.configRef = this.config.defaultConfig\n      ? {\n          current: {\n            shared: {\n              ...defaultConfigRef.current.shared,\n              ...this.config.defaultConfig.shared,\n            },\n            queries: {\n              ...defaultConfigRef.current.queries,\n              ...this.config.defaultConfig.queries,\n            },\n            mutations: {\n              ...defaultConfigRef.current.mutations,\n              ...this.config.defaultConfig.mutations,\n            },\n          },\n        }\n      : defaultConfigRef\n\n    this.queries = {}\n    this.isFetching = 0\n  }\n\n  private notifyGlobalListeners(query?: Query<any, any>) {\n    this.isFetching = Object.values(this.queries).reduce(\n      (acc, query) => (query.state.isFetching ? acc + 1 : acc),\n      0\n    )\n\n    this.globalListeners.forEach(d => d(this, query))\n  }\n\n  getDefaultConfig() {\n    return this.configRef.current\n  }\n\n  subscribe(listener: QueryCacheListener): () => void {\n    this.globalListeners.push(listener)\n    return () => {\n      this.globalListeners.splice(this.globalListeners.indexOf(listener), 1)\n    }\n  }\n\n  clear(options?: ClearOptions): void {\n    Object.values(this.queries).forEach(query => query.clear())\n    this.queries = {}\n    if (options?.notify) {\n      this.notifyGlobalListeners()\n    }\n  }\n\n  getQueries<TResult = unknown, TError = unknown>(\n    predicate: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): Query<TResult, TError>[] {\n    if (predicate === true) {\n      return Object.values(this.queries)\n    }\n\n    let predicateFn: QueryPredicateFn\n\n    if (typeof predicate === 'function') {\n      predicateFn = predicate as QueryPredicateFn\n    } else {\n      const [queryHash, queryKey] = this.configRef.current.queries!\n        .queryKeySerializerFn!(predicate)\n\n      predicateFn = d =>\n        options?.exact\n          ? d.queryHash === queryHash\n          : deepIncludes(d.queryKey, queryKey)\n    }\n\n    return Object.values(this.queries).filter(predicateFn)\n  }\n\n  getQuery<TResult, TError = unknown>(\n    predicate: QueryPredicate\n  ): Query<TResult, TError> | undefined {\n    return this.getQueries<TResult, TError>(predicate, { exact: true })[0]\n  }\n\n  getQueryData<TResult>(predicate: QueryPredicate): TResult | undefined {\n    return this.getQuery<TResult>(predicate)?.state.data\n  }\n\n  removeQueries(\n    predicate: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): void {\n    this.getQueries(predicate, options).forEach(query => query.clear())\n  }\n\n  cancelQueries(\n    predicate: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): void {\n    this.getQueries(predicate, options).forEach(query => query.cancel())\n  }\n\n  async invalidateQueries(\n    predicate: QueryPredicate,\n    options?: InvalidateQueriesOptions\n  ): Promise<void> {\n    const { refetchActive = true, refetchInactive = false, throwOnError } =\n      options || {}\n\n    try {\n      await Promise.all(\n        this.getQueries(predicate, options).map(query => {\n          if (query.instances.length) {\n            if (\n              refetchActive &&\n              query.instances.some(instance => instance.config.enabled)\n            ) {\n              return query.fetch()\n            }\n          } else {\n            if (refetchInactive) {\n              return query.fetch()\n            }\n          }\n\n          return query.invalidate()\n        })\n      )\n    } catch (err) {\n      if (throwOnError) {\n        throw err\n      }\n    }\n  }\n\n  resetErrorBoundaries(): void {\n    this.getQueries(true).forEach(query => {\n      query.state.throwInErrorBoundary = false\n    })\n  }\n\n  buildQuery<TResult, TError = unknown>(\n    userQueryKey: QueryKey,\n    queryConfig: QueryConfig<TResult, TError> = {}\n  ): Query<TResult, TError> {\n    const config = {\n      ...this.configRef.current.shared!,\n      ...this.configRef.current.queries!,\n      ...queryConfig,\n    } as QueryConfig<TResult, TError>\n\n    const [queryHash, queryKey] = config.queryKeySerializerFn!(userQueryKey)\n\n    let query\n\n    if (this.queries[queryHash]) {\n      query = this.queries[queryHash] as Query<TResult, TError>\n      query.config = config\n    }\n\n    if (!query) {\n      query = new Query<TResult, TError>({\n        queryCache: this,\n        queryKey,\n        queryHash,\n        config,\n        notifyGlobalListeners: query => {\n          this.notifyGlobalListeners(query)\n        },\n      })\n\n      // If the query started with data, schedule\n      // a stale timeout\n      if (!isServer && query.state.data) {\n        query.scheduleStaleTimeout()\n\n        // Simulate a query healing process\n        query.heal()\n        // Schedule for garbage collection in case\n        // nothing subscribes to this query\n        query.scheduleGarbageCollection()\n      }\n\n      if (!this.config.frozen) {\n        this.queries[queryHash] = query\n\n        if (isServer) {\n          this.notifyGlobalListeners()\n        } else {\n          // Here, we setTimeout so as to not trigger\n          // any setState's in parent components in the\n          // middle of the render phase.\n          setTimeout(() => {\n            this.notifyGlobalListeners()\n          })\n        }\n      }\n    }\n\n    return query\n  }\n\n  // Parameter syntax with optional prefetch options\n  async prefetchQuery<TResult, TError, TKey extends QueryKeyWithoutObject>(\n    queryKey: TKey,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with config and optional prefetch options\n  async prefetchQuery<TResult, TError, TKey extends QueryKeyWithoutObject>(\n    queryKey: TKey,\n    config: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with query function and optional prefetch options\n  async prefetchQuery<\n    TResult,\n    TError,\n    TKey extends QueryKeyWithoutObjectAndArray\n  >(\n    queryKey: TKey,\n    queryFn: TupleQueryFunction<TResult, [TKey]>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  async prefetchQuery<TResult, TError, TKey extends TupleQueryKey>(\n    queryKey: TKey,\n    queryFn: TupleQueryFunction<TResult, TKey>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with query function, config and optional prefetch options\n  async prefetchQuery<\n    TResult,\n    TError,\n    TKey extends QueryKeyWithoutObjectAndArray\n  >(\n    queryKey: TKey,\n    queryFn: TupleQueryFunction<TResult, [TKey]>,\n    queryConfig: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  async prefetchQuery<TResult, TError, TKey extends TupleQueryKey>(\n    queryKey: TKey,\n    queryFn: TupleQueryFunction<TResult, TKey>,\n    queryConfig: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Object syntax\n  async prefetchQuery<TResult, TError, TKey extends QueryKeyWithoutArray>(\n    config: PrefetchQueryObjectConfig<TResult, TError, [TKey]>\n  ): Promise<TResult | undefined>\n\n  async prefetchQuery<TResult, TError, TKey extends TupleQueryKey>(\n    config: PrefetchQueryObjectConfig<TResult, TError, TKey>\n  ): Promise<TResult | undefined>\n\n  // Implementation\n  async prefetchQuery<TResult, TError>(\n    ...args: any[]\n  ): Promise<TResult | undefined> {\n    if (\n      isObject(args[1]) &&\n      (args[1].hasOwnProperty('throwOnError') ||\n        args[1].hasOwnProperty('force'))\n    ) {\n      args[3] = args[1]\n      args[1] = undefined\n      args[2] = undefined\n    }\n\n    const [queryKey, config, options] = getQueryArgs<\n      TResult,\n      TError,\n      PrefetchQueryOptions | undefined\n    >(args)\n    // https://github.com/tannerlinsley/react-query/issues/652\n    const configWithoutRetry = { retry: false, ...config }\n\n    try {\n      const query = this.buildQuery<TResult, TError>(\n        queryKey,\n        configWithoutRetry\n      )\n      if (options?.force || query.state.isStale) {\n        await query.fetch()\n      }\n      return query.state.data\n    } catch (err) {\n      if (options?.throwOnError) {\n        throw err\n      }\n      Console.error(err)\n      return\n    }\n  }\n\n  setQueryData<TResult, TError = unknown>(\n    queryKey: QueryKey,\n    updater: Updater<TResult | undefined, TResult>,\n    config: QueryConfig<TResult, TError> = {}\n  ) {\n    let query = this.getQuery<TResult, TError>(queryKey)\n\n    if (!query) {\n      query = this.buildQuery<TResult, TError>(queryKey, config)\n    }\n\n    query.setData(updater)\n  }\n}\n\nconst defaultQueryCache = makeQueryCache({ frozen: isServer })\nexport { defaultQueryCache as queryCache }\nexport const queryCaches = [defaultQueryCache]\n\nexport function makeQueryCache(config?: QueryCacheConfig) {\n  return new QueryCache(config)\n}\n","import { isOnline, isDocumentVisible, Console, isServer } from './utils'\nimport { queryCaches } from './queryCache'\n\ntype FocusHandler = () => void\n\nconst visibilityChangeEvent = 'visibilitychange'\nconst focusEvent = 'focus'\n\nconst onWindowFocus: FocusHandler = () => {\n  if (isDocumentVisible() && isOnline()) {\n    queryCaches.forEach(queryCache =>\n      queryCache\n        .invalidateQueries(query => {\n          if (!query.instances.length) {\n            return false\n          }\n\n          if (!query.instances.some(instance => instance.config.enabled)) {\n            return false\n          }\n\n          if (!query.state.isStale) {\n            return false\n          }\n\n          if (query.shouldContinueRetryOnFocus) {\n            // delete promise, so refetching will create new one\n            delete query.promise\n          }\n\n          return Boolean(query.config.refetchOnWindowFocus)\n        })\n        .catch(Console.error)\n    )\n  }\n}\n\nlet removePreviousHandler: (() => void) | void\n\nexport function setFocusHandler(callback: (callback: FocusHandler) => void) {\n  // Unsub the old watcher\n  if (removePreviousHandler) {\n    removePreviousHandler()\n  }\n  // Sub the new watcher\n  removePreviousHandler = callback(onWindowFocus)\n}\n\nsetFocusHandler((handleFocus: FocusHandler) => {\n  // Listen to visibillitychange and focus\n  if (!isServer && window?.addEventListener) {\n    window.addEventListener(visibilityChangeEvent, handleFocus, false)\n    window.addEventListener(focusEvent, handleFocus, false)\n\n    return () => {\n      // Be sure to unsubscribe if a new handler is set\n      window.removeEventListener(visibilityChangeEvent, handleFocus)\n      window.removeEventListener(focusEvent, handleFocus)\n    }\n  }\n  return\n})\n","import React from 'react'\n\nimport {\n  queryCache as defaultQueryCache,\n  queryCaches,\n  makeQueryCache,\n} from '../core'\nimport { QueryCache } from '../core/queryCache'\n\nexport const queryCacheContext = React.createContext(defaultQueryCache)\n\nexport const useQueryCache = () => React.useContext(queryCacheContext)\n\nexport interface ReactQueryCacheProviderProps {\n  queryCache?: QueryCache\n}\n\nexport const ReactQueryCacheProvider: React.FC<ReactQueryCacheProviderProps> = ({\n  queryCache,\n  children,\n}) => {\n  const resolvedQueryCache = React.useMemo(\n    () => queryCache || makeQueryCache(),\n    [queryCache]\n  )\n\n  React.useEffect(() => {\n    queryCaches.push(resolvedQueryCache)\n\n    return () => {\n      // remove the cache from the active list\n      const i = queryCaches.indexOf(resolvedQueryCache)\n      if (i > -1) {\n        queryCaches.splice(i, 1)\n      }\n      // if the resolvedQueryCache was created by us, we need to tear it down\n      if (queryCache == null) {\n        resolvedQueryCache.clear({ notify: false })\n      }\n    }\n  }, [resolvedQueryCache, queryCache])\n\n  return (\n    <queryCacheContext.Provider value={resolvedQueryCache}>\n      {children}\n    </queryCacheContext.Provider>\n  )\n}\n","import React from 'react'\nimport { DEFAULT_CONFIG, defaultConfigRef } from '../core/config'\nimport { ReactQueryConfig } from '../core/types'\nimport { useQueryCache } from './ReactQueryCacheProvider'\n\nconst configContext = React.createContext<ReactQueryConfig | undefined>(\n  undefined\n)\n\nexport function useConfigContext() {\n  const queryCache = useQueryCache()\n  return (\n    React.useContext(configContext) ||\n    queryCache.getDefaultConfig() ||\n    defaultConfigRef.current\n  )\n}\n\nexport interface ReactQueryProviderConfig extends ReactQueryConfig {}\n\nexport interface ReactQueryConfigProviderProps {\n  config: ReactQueryProviderConfig\n}\n\nexport const ReactQueryConfigProvider: React.FC<ReactQueryConfigProviderProps> = ({\n  config,\n  children,\n}) => {\n  const configContextValueOrDefault = useConfigContext()\n  const configContextValue = React.useContext(configContext)\n\n  const newConfig = React.useMemo<ReactQueryConfig>(() => {\n    const { shared = {}, queries = {}, mutations = {} } = config\n    const {\n      shared: contextShared = {},\n      queries: contextQueries = {},\n      mutations: contextMutations = {},\n    } = configContextValueOrDefault\n\n    return {\n      shared: {\n        ...contextShared,\n        ...shared,\n      },\n      queries: {\n        ...contextQueries,\n        ...queries,\n      },\n      mutations: {\n        ...contextMutations,\n        ...mutations,\n      },\n    }\n  }, [config, configContextValueOrDefault])\n\n  React.useEffect(() => {\n    // restore previous config on unmount\n    return () => {\n      defaultConfigRef.current = {\n        ...(configContextValueOrDefault || DEFAULT_CONFIG),\n      }\n    }\n  }, [configContextValueOrDefault])\n\n  // If this is the outermost provider, overwrite the shared default config\n  if (!configContextValue) {\n    defaultConfigRef.current = newConfig\n  }\n\n  return (\n    <configContext.Provider value={newConfig}>\n      {children}\n    </configContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { uid, isServer } from '../core/utils'\nimport { QueryResultBase, BaseQueryConfig, QueryStatus } from '../core/types'\n\nexport function useUid(): number {\n  const ref = React.useRef(0)\n\n  if (ref.current === null) {\n    ref.current = uid()\n  }\n\n  return ref.current\n}\n\nexport function useGetLatest<T>(obj: T): () => T {\n  const ref = React.useRef<T>(obj)\n  ref.current = obj\n  return React.useCallback(() => ref.current, [])\n}\n\nexport function useMountedCallback<T extends Function>(callback: T): T {\n  const mounted = React.useRef(false)\n\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](() => {\n    mounted.current = true\n    return () => {\n      mounted.current = false\n    }\n  }, [])\n\n  return (React.useCallback(\n    (...args: any[]) => (mounted.current ? callback(...args) : void 0),\n    [callback]\n  ) as any) as T\n}\n\nexport function useRerenderer() {\n  const rerender = useMountedCallback(React.useState<unknown>()[1])\n  return React.useCallback(() => rerender({}), [rerender])\n}\n\nexport function handleSuspense(\n  config: BaseQueryConfig<any, any>,\n  result: QueryResultBase<any, any>\n) {\n  const { error, query } = result\n  const { state } = query\n\n  if (config.suspense || config.useErrorBoundary) {\n    if (state.status === QueryStatus.Error && state.throwInErrorBoundary) {\n      throw error\n    }\n\n    if (\n      config.suspense &&\n      state.status !== QueryStatus.Success &&\n      config.enabled\n    ) {\n      const instance = query.subscribe()\n\n      instance.updateConfig({\n        ...config,\n        onSettled: (data, error) => {\n          instance.unsubscribe(true)\n          config.onSettled?.(data, error)\n        },\n      })\n\n      throw query.fetch()\n    }\n  }\n}\n","import React from 'react'\n\nimport { useRerenderer, useGetLatest } from './utils'\nimport { useQueryCache } from './ReactQueryCacheProvider'\n\nexport function useIsFetching(): number {\n  const queryCache = useQueryCache()\n  const rerender = useRerenderer()\n  const isFetching = queryCache.isFetching\n\n  const getIsFetching = useGetLatest(isFetching)\n\n  React.useEffect(\n    () =>\n      queryCache.subscribe(newCache => {\n        if (getIsFetching() !== newCache.isFetching) {\n          rerender()\n        }\n      }),\n    [getIsFetching, queryCache, rerender]\n  )\n\n  return isFetching\n}\n","import React from 'react'\n\nimport { useConfigContext } from './ReactQueryConfigProvider'\nimport { useGetLatest, useMountedCallback } from './utils'\nimport { Console, uid, getStatusProps } from '../core/utils'\nimport {\n  QueryStatus,\n  MutationResultPair,\n  MutationFunction,\n  MutationConfig,\n  MutateConfig,\n} from '../core/types'\n\n// TYPES\n\ntype Reducer<S, A> = (prevState: S, action: A) => S\n\ninterface State<TResult, TError> {\n  status: QueryStatus\n  data: TResult | undefined\n  error: TError | null\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n}\n\nenum ActionType {\n  Reset = 'Reset',\n  Loading = 'Loading',\n  Resolve = 'Resolve',\n  Reject = 'Reject',\n}\n\ninterface ResetAction {\n  type: ActionType.Reset\n}\n\ninterface LoadingAction {\n  type: ActionType.Loading\n}\n\ninterface ResolveAction<TResult> {\n  type: ActionType.Resolve\n  data: TResult\n}\n\ninterface RejectAction<TError> {\n  type: ActionType.Reject\n  error: TError\n}\n\ntype Action<TResult, TError> =\n  | ResetAction\n  | LoadingAction\n  | ResolveAction<TResult>\n  | RejectAction<TError>\n\n// HOOK\n\nconst getDefaultState = (): State<any, any> => ({\n  ...getStatusProps(QueryStatus.Idle),\n  data: undefined,\n  error: null,\n})\n\nfunction mutationReducer<TResult, TError>(\n  state: State<TResult, TError>,\n  action: Action<TResult, TError>\n): State<TResult, TError> {\n  switch (action.type) {\n    case ActionType.Reset:\n      return getDefaultState()\n    case ActionType.Loading:\n      return {\n        ...getStatusProps(QueryStatus.Loading),\n        data: undefined,\n        error: null,\n      }\n    case ActionType.Resolve:\n      return {\n        ...getStatusProps(QueryStatus.Success),\n        data: action.data,\n        error: null,\n      }\n    case ActionType.Reject:\n      return {\n        ...getStatusProps(QueryStatus.Error),\n        data: undefined,\n        error: action.error,\n      }\n    default:\n      return state\n  }\n}\n\nexport function useMutation<\n  TResult,\n  TError = unknown,\n  TVariables = undefined,\n  TSnapshot = unknown\n>(\n  mutationFn: MutationFunction<TResult, TVariables>,\n  config: MutationConfig<TResult, TError, TVariables, TSnapshot> = {}\n): MutationResultPair<TResult, TError, TVariables, TSnapshot> {\n  const [state, unsafeDispatch] = React.useReducer(\n    mutationReducer as Reducer<State<TResult, TError>, Action<TResult, TError>>,\n    null,\n    getDefaultState\n  )\n\n  const dispatch = useMountedCallback(unsafeDispatch)\n\n  const getMutationFn = useGetLatest(mutationFn)\n\n  const contextConfig = useConfigContext()\n\n  const getConfig = useGetLatest({\n    ...contextConfig.shared,\n    ...contextConfig.mutations,\n    ...config,\n  })\n\n  const latestMutationRef = React.useRef<number>()\n\n  const mutate = React.useCallback(\n    async (\n      variables?: TVariables,\n      mutateConfig: MutateConfig<TResult, TError, TVariables, TSnapshot> = {}\n    ): Promise<TResult | undefined> => {\n      const config = getConfig()\n\n      const mutationId = uid()\n      latestMutationRef.current = mutationId\n\n      const isLatest = () => latestMutationRef.current === mutationId\n\n      let snapshotValue: TSnapshot | undefined\n\n      try {\n        dispatch({ type: ActionType.Loading })\n        snapshotValue = (await config.onMutate?.(variables!)) as TSnapshot\n\n        const data = await getMutationFn()(variables!)\n\n        if (isLatest()) {\n          dispatch({ type: ActionType.Resolve, data })\n        }\n\n        await config.onSuccess?.(data, variables!)\n        await mutateConfig.onSuccess?.(data, variables!)\n        await config.onSettled?.(data, null, variables!)\n        await mutateConfig.onSettled?.(data, null, variables!)\n\n        return data\n      } catch (error) {\n        Console.error(error)\n        await config.onError?.(error, variables!, snapshotValue!)\n        await mutateConfig.onError?.(error, variables!, snapshotValue!)\n        await config.onSettled?.(\n          undefined,\n          error,\n          variables!,\n          snapshotValue as TSnapshot\n        )\n        await mutateConfig.onSettled?.(\n          undefined,\n          error,\n          variables!,\n          snapshotValue\n        )\n\n        if (isLatest()) {\n          dispatch({ type: ActionType.Reject, error })\n        }\n\n        if (mutateConfig.throwOnError ?? config.throwOnError) {\n          throw error\n        }\n\n        return\n      }\n    },\n    [dispatch, getConfig, getMutationFn]\n  )\n\n  const reset = React.useCallback(() => {\n    dispatch({ type: ActionType.Reset })\n  }, [dispatch])\n\n  React.useEffect(() => {\n    const { suspense, useErrorBoundary } = getConfig()\n\n    if ((useErrorBoundary ?? suspense) && state.error) {\n      throw state.error\n    }\n  }, [getConfig, state.error])\n\n  return [mutate, { ...state, reset }]\n}\n","import React from 'react'\n\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useRerenderer } from './utils'\nimport { QueryInstance } from '../core/queryInstance'\nimport { QueryConfig, QueryKey, QueryResultBase } from '../core/types'\n\nexport function useBaseQuery<TResult, TError>(\n  queryKey: QueryKey,\n  config: QueryConfig<TResult, TError> = {}\n): QueryResultBase<TResult, TError> {\n  // Make a rerender function\n  const rerender = useRerenderer()\n\n  // Get the query cache\n  const queryCache = useQueryCache()\n\n  // Build the query for use\n  const query = queryCache.buildQuery<TResult, TError>(queryKey, config)\n  const state = query.state\n\n  // Create a query instance ref\n  const instanceRef = React.useRef<QueryInstance<TResult, TError>>()\n\n  // Subscribe to the query when the subscribe function changes\n  React.useEffect(() => {\n    const instance = query.subscribe(() => {\n      rerender()\n    })\n\n    instanceRef.current = instance\n\n    // Unsubscribe when things change\n    return () => instance.unsubscribe()\n  }, [query, rerender])\n\n  // Always update the config\n  React.useEffect(() => {\n    instanceRef.current?.updateConfig(config)\n  })\n\n  const enabledBool = Boolean(config.enabled)\n\n  // Run the instance when the query or enabled change\n  React.useEffect(() => {\n    if (enabledBool && query) {\n      // Just for change detection\n    }\n    instanceRef.current?.run()\n  }, [enabledBool, query])\n\n  const clear = React.useMemo(() => query.clear.bind(query), [query])\n  const refetch = React.useMemo(() => query.refetch.bind(query), [query])\n\n  return {\n    clear,\n    error: state.error,\n    failureCount: state.failureCount,\n    isError: state.isError,\n    isFetching: state.isFetching,\n    isIdle: state.isIdle,\n    isLoading: state.isLoading,\n    isStale: state.isStale,\n    isSuccess: state.isSuccess,\n    query,\n    refetch,\n    status: state.status,\n    updatedAt: state.updatedAt,\n  }\n}\n","import { getQueryArgs } from '../core/utils'\nimport { useConfigContext } from './ReactQueryConfigProvider'\nimport { QueryConfig, QueryKey } from '../core/types'\n\nexport function useQueryArgs<TResult, TError, TOptions = undefined>(\n  args: any[]\n): [QueryKey, QueryConfig<TResult, TError>, TOptions] {\n  const configContext = useConfigContext()\n\n  const [queryKey, config, options] = getQueryArgs<TResult, TError, TOptions>(\n    args\n  )\n\n  // Build the final config\n  const configWithContext = {\n    ...configContext.shared,\n    ...configContext.queries,\n    ...config,\n  } as QueryConfig<TResult, TError>\n\n  return [queryKey, configWithContext, options]\n}\n","import { useBaseQuery } from './useBaseQuery'\nimport { handleSuspense } from './utils'\nimport {\n  QueryConfig,\n  QueryKey,\n  QueryKeyWithoutArray,\n  QueryKeyWithoutObject,\n  QueryKeyWithoutObjectAndArray,\n  QueryResult,\n  TupleQueryFunction,\n  TupleQueryKey,\n} from '../core/types'\nimport { useQueryArgs } from './useQueryArgs'\n\n// TYPES\n\nexport interface UseQueryObjectConfig<\n  TResult,\n  TError,\n  TKey extends TupleQueryKey\n> {\n  queryKey: QueryKey\n  queryFn?: TupleQueryFunction<TResult, [TKey]>\n  config?: QueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function useQuery<TResult, TError, TKey extends QueryKeyWithoutObject>(\n  queryKey: TKey,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useQuery<\n  TResult,\n  TError,\n  TKey extends QueryKeyWithoutObjectAndArray\n>(\n  queryKey: TKey,\n  queryFn: TupleQueryFunction<TResult, [TKey]>,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useQuery<TResult, TError, TKey extends TupleQueryKey>(\n  queryKey: TKey,\n  queryFn: TupleQueryFunction<TResult, TKey>,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Object syntax\nexport function useQuery<TResult, TError, TKey extends QueryKeyWithoutArray>(\n  config: UseQueryObjectConfig<TResult, TError, [TKey]>\n): QueryResult<TResult, TError>\n\nexport function useQuery<TResult, TError, TKey extends TupleQueryKey>(\n  config: UseQueryObjectConfig<TResult, TError, TKey>\n): QueryResult<TResult, TError>\n\n// Implementation\nexport function useQuery<TResult, TError>(\n  ...args: any[]\n): QueryResult<TResult, TError> {\n  const [queryKey, config] = useQueryArgs<TResult, TError>(args)\n  const result = useBaseQuery<TResult, TError>(queryKey, config)\n\n  handleSuspense(config, result)\n\n  return {\n    ...result,\n    data: result.query.state.data,\n  }\n}\n","import React from 'react'\n\nimport { useBaseQuery } from './useBaseQuery'\nimport { handleSuspense } from './utils'\nimport { getStatusProps } from '../core/utils'\nimport {\n  PaginatedQueryConfig,\n  PaginatedQueryResult,\n  QueryKey,\n  QueryKeyWithoutArray,\n  QueryKeyWithoutObject,\n  QueryKeyWithoutObjectAndArray,\n  QueryStatus,\n  TupleQueryFunction,\n  TupleQueryKey,\n} from '../core/types'\nimport { useQueryArgs } from './useQueryArgs'\n\n// A paginated query is more like a \"lag\" query, which means\n// as the query key changes, we keep the results from the\n// last query and use them as placeholder data in the next one\n// We DON'T use it as initial data though. That's important\n\n// TYPES\n\nexport interface UsePaginatedQueryObjectConfig<\n  TResult,\n  TError,\n  TKey extends TupleQueryKey\n> {\n  queryKey: QueryKey\n  queryFn?: TupleQueryFunction<TResult, TKey>\n  config?: PaginatedQueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function usePaginatedQuery<\n  TResult,\n  TError,\n  TKey extends QueryKeyWithoutObject\n>(\n  queryKey: TKey,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function usePaginatedQuery<\n  TResult,\n  TError,\n  TKey extends QueryKeyWithoutObjectAndArray\n>(\n  queryKey: TKey,\n  queryFn: TupleQueryFunction<TResult, [TKey]>,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\nexport function usePaginatedQuery<TResult, TError, TKey extends TupleQueryKey>(\n  queryKey: TKey,\n  queryFn: TupleQueryFunction<TResult, TKey>,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Object syntax\nexport function usePaginatedQuery<\n  TResult,\n  TError,\n  TKey extends QueryKeyWithoutArray\n>(\n  config: UsePaginatedQueryObjectConfig<TResult, TError, [TKey]>\n): PaginatedQueryResult<TResult, TError>\n\nexport function usePaginatedQuery<TResult, TError, TKey extends TupleQueryKey>(\n  config: UsePaginatedQueryObjectConfig<TResult, TError, TKey>\n): PaginatedQueryResult<TResult, TError>\n\n// Implementation\nexport function usePaginatedQuery<TResult, TError>(\n  ...args: any[]\n): PaginatedQueryResult<TResult, TError> {\n  const [queryKey, config] = useQueryArgs<TResult, TError>(args)\n\n  // Keep track of the latest data result\n  const lastDataRef = React.useRef<TResult>()\n\n  // If latestData is there, don't use initialData\n  if (typeof lastDataRef.current !== 'undefined') {\n    delete config.initialData\n  }\n\n  // Make the query as normal\n  const result = useBaseQuery<TResult, TError>(queryKey, config)\n\n  // If the query is disabled, get rid of the latest data\n  if (!result.query.config.enabled) {\n    lastDataRef.current = undefined\n  }\n\n  // Get the real data and status from the query\n  const { data: latestData, status } = result.query.state\n\n  // If the real query succeeds, and there is data in it,\n  // update the latest data\n  React.useEffect(() => {\n    if (status === QueryStatus.Success && typeof latestData !== 'undefined') {\n      lastDataRef.current = latestData\n    }\n  }, [latestData, status])\n\n  // Resolved data should be either the real data we're waiting on\n  // or the latest placeholder data\n  let resolvedData = latestData\n  if (typeof resolvedData === 'undefined') {\n    resolvedData = lastDataRef.current\n  }\n\n  // If we have any data at all from either, we\n  // need to make sure the status is success, even though\n  // the real query may still be loading\n  if (typeof resolvedData !== 'undefined') {\n    const overrides = getStatusProps(QueryStatus.Success)\n    Object.assign(result.query.state, overrides)\n    Object.assign(result, overrides)\n  }\n\n  handleSuspense(config, result)\n\n  return {\n    ...result,\n    resolvedData,\n    latestData,\n  }\n}\n","import React from 'react'\n\nimport { useBaseQuery } from './useBaseQuery'\nimport { handleSuspense } from './utils'\nimport {\n  InfiniteQueryConfig,\n  InfiniteQueryResult,\n  QueryKey,\n  QueryKeyWithoutArray,\n  QueryKeyWithoutObject,\n  QueryKeyWithoutObjectAndArray,\n  TupleQueryFunction,\n  TupleQueryKey,\n} from '../core/types'\nimport { useQueryArgs } from './useQueryArgs'\n\n// TYPES\n\nexport interface UseInfiniteQueryObjectConfig<\n  TResult,\n  TError,\n  TKey extends TupleQueryKey\n> {\n  queryKey: QueryKey\n  queryFn?: TupleQueryFunction<TResult, TKey>\n  config?: InfiniteQueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function useInfiniteQuery<\n  TResult,\n  TError,\n  TKey extends QueryKeyWithoutObject\n>(\n  queryKey: TKey,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useInfiniteQuery<\n  TResult,\n  TError,\n  TKey extends QueryKeyWithoutObjectAndArray\n>(\n  queryKey: TKey,\n  queryFn: TupleQueryFunction<TResult, [TKey]>,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\nexport function useInfiniteQuery<TResult, TError, TKey extends TupleQueryKey>(\n  queryKey: TKey,\n  queryFn: TupleQueryFunction<TResult, TKey>,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Object syntax\nexport function useInfiniteQuery<\n  TResult,\n  TError,\n  TKey extends QueryKeyWithoutArray\n>(\n  config: UseInfiniteQueryObjectConfig<TResult, TError, [TKey]>\n): InfiniteQueryResult<TResult, TError>\n\nexport function useInfiniteQuery<TResult, TError, TKey extends TupleQueryKey>(\n  config: UseInfiniteQueryObjectConfig<TResult, TError, TKey>\n): InfiniteQueryResult<TResult, TError>\n\n// Implementation\nexport function useInfiniteQuery<TResult, TError>(\n  ...args: any[]\n): InfiniteQueryResult<TResult, TError> {\n  const [queryKey, config] = useQueryArgs<TResult[], TError>(args)\n\n  config.infinite = true\n\n  const result = useBaseQuery<TResult[], TError>(queryKey, config)\n  const query = result.query\n  const state = result.query.state\n\n  handleSuspense(config, result)\n\n  const fetchMore = React.useMemo(() => query.fetchMore.bind(query), [query])\n\n  return {\n    ...result,\n    data: state.data,\n    canFetchMore: state.canFetchMore,\n    fetchMore,\n    isFetching: state.isFetching,\n    isFetchingMore: state.isFetchingMore,\n  }\n}\n"],"names":["QueryStatus","_uid","uid","cancelledError","isServer","window","noop","identity","d","Console","console","error","warn","log","setConsole","c","functionalUpdate","updater","input","stableStringifyReplacer","_key","value","Error","isObject","Object","keys","sort","reduce","result","key","stableStringify","JSON","stringify","a","Array","isArray","deepIncludes","b","some","isDocumentVisible","document","undefined","includes","visibilityState","isOnline","navigator","onLine","getQueryArgs","args","queryKey","queryFn","config","options","deepEqual","equal","shallowEqual","deep","depth","length","i","valueOf","prototype","hasOwnProperty","call","getStatusProps","status","isLoading","Loading","isSuccess","Success","isError","isIdle","Idle","defaultQueryKeySerializerFn","arrayQueryKey","queryHash","parse","DEFAULT_CONFIG","shared","suspense","queries","queryKeySerializerFn","enabled","retry","retryDelay","attemptIndex","Math","min","staleTime","cacheTime","refetchOnWindowFocus","refetchInterval","queryFnParamsFilter","refetchOnMount","isDataEqual","useErrorBoundary","mutations","throwOnError","defaultConfigRef","current","direct","then","Promise","resolve","body","recover","e","QueryInstance","query","onStateUpdate","id","stateUpdateListener","clearInterval","refetchIntervalId","updateConfig","oldConfig","clearIntervals","minInterval","instances","map","Infinity","setInterval","refetchIntervalInBackground","fetch","run","state","isFetched","isStale","unsubscribe","preventGC","filter","cancel","scheduleGarbageCollection","action","type","ActionType","onSuccess","data","onSettled","onError","f","arguments","apply","reject","pact","s","v","o","bind","observer","onFulfilled","onRejected","callback","_this","thenable","test","awaitBody","shouldContinue","_resumeAfterBody","_resumeAfterTest","thrown","finalizer","Query","init","queryCache","notifyGlobalListeners","getDefaultState","infinite","infiniteConfig","infiniteData","canFetchMore","fetchMoreVariable","getFetchMore","Boolean","pageVariables","dispatch","newState","queryReducer","forEach","scheduleStaleTimeout","clearStaleTimeout","staleTimeout","setTimeout","invalidate","MarkStale","clearCacheTimeout","cacheTimeout","clear","refetch","heal","cancelled","cancelPromises","promise","instance","clearTimeout","clearRetryTimeout","retryTimeout","setState","SetState","setData","subscribe","push","tryFetchData","fn","promiseOrValue","shouldContinueRetryOnFocus","failureCount","Failed","delay","fetchMore","originalQueryFn","rebuiltPageVariables","shift","nextCursor","pageArgs","slice","previous","old","isFetchingMore","newArgs","newData","Fetch","initialData","hasInitialData","initialStale","initialStatus","isFetching","updatedAt","Date","now","throwInErrorBoundary","QueryCache","globalListeners","configRef","defaultConfig","values","acc","getDefaultConfig","listener","splice","indexOf","notify","getQueries","predicate","predicateFn","exact","getQuery","getQueryData","removeQueries","cancelQueries","invalidateQueries","refetchActive","refetchInactive","all","err","resetErrorBoundaries","buildQuery","userQueryKey","queryConfig","frozen","prefetchQuery","configWithoutRetry","force","setQueryData","defaultQueryCache","makeQueryCache","queryCaches","visibilityChangeEvent","focusEvent","onWindowFocus","catch","removePreviousHandler","setFocusHandler","handleFocus","addEventListener","removeEventListener","queryCacheContext","React","createContext","useQueryCache","useContext","ReactQueryCacheProvider","children","resolvedQueryCache","useMemo","useEffect","configContext","useConfigContext","ReactQueryConfigProvider","configContextValueOrDefault","configContextValue","newConfig","contextShared","contextQueries","contextMutations","useGetLatest","obj","ref","useRef","useCallback","useMountedCallback","mounted","useRerenderer","rerender","useState","handleSuspense","useIsFetching","getIsFetching","newCache","_await","mutationReducer","Reset","Resolve","Reject","useMutation","mutationFn","useReducer","unsafeDispatch","getMutationFn","contextConfig","getConfig","latestMutationRef","mutate","variables","mutateConfig","mutationId","isLatest","snapshotValue","onMutate","reset","useBaseQuery","instanceRef","enabledBool","useQueryArgs","configWithContext","useQuery","usePaginatedQuery","lastDataRef","latestData","resolvedData","overrides","assign","useInfiniteQuery"],"mappings":"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"}