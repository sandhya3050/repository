{"version":3,"file":"react-query.min.mjs","sources":["../src/core/types.ts","../src/core/utils.ts","../src/core/config.ts","../src/core/queryInstance.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/setFocusHandler.ts","../src/react/ReactQueryCacheProvider.tsx","../src/react/ReactQueryConfigProvider.tsx","../src/react/useMutation.ts","../src/react/utils.ts","../src/react/useIsFetching.ts","../src/react/useBaseQuery.ts","../src/react/useQueryArgs.ts","../src/react/useQuery.ts","../src/react/usePaginatedQuery.ts","../src/react/useInfiniteQuery.ts"],"sourcesContent":["import { Query, FetchMoreOptions } from './query'\n\nexport type QueryKeyObject =\n  | object\n  | { [key: string]: QueryKey }\n  | { [key: number]: QueryKey }\n\nexport type QueryKeyPrimitive = string | boolean | number | null | undefined\n\nexport type QueryKeyWithoutObjectAndArray = QueryKeyPrimitive\n\nexport type QueryKeyWithoutObject =\n  | QueryKeyWithoutObjectAndArray\n  | readonly QueryKey[]\n\nexport type QueryKeyWithoutArray =\n  | QueryKeyWithoutObjectAndArray\n  | QueryKeyObject\n\nexport type QueryKey = QueryKeyWithoutObject | QueryKeyObject\n\nexport type ArrayQueryKey = QueryKey[]\n\nexport type QueryFunction<TResult> = (\n  ...args: any[]\n) => TResult | Promise<TResult>\n\n// The tuple variants are only to infer types in the public API\nexport type TupleQueryKey = readonly [QueryKey, ...QueryKey[]]\n\nexport type TupleQueryFunction<TResult, TKey extends TupleQueryKey> = (\n  ...args: TKey\n) => TResult | Promise<TResult>\n\nexport type InitialDataFunction<TResult> = () => TResult | undefined\n\nexport type InitialStaleFunction = () => boolean\n\nexport type QueryKeySerializerFunction = (\n  queryKey: QueryKey\n) => [string, QueryKey[]]\n\nexport interface BaseQueryConfig<TResult, TError = unknown> {\n  /**\n   * Set this to `false` to disable automatic refetching when the query mounts or changes query keys.\n   * To refetch the query, use the `refetch` method returned from the `useQuery` instance.\n   */\n  enabled?: boolean | unknown\n  /**\n   * If `false`, failed queries will not retry by default.\n   * If `true`, failed queries will retry infinitely., failureCount: num\n   * If set to an integer number, e.g. 3, failed queries will retry until the failed query count meets that number.\n   * If set to a function `(failureCount, error) => boolean` failed queries will retry until the function returns false.\n   */\n  retry?: boolean | number | ((failureCount: number, error: TError) => boolean)\n  retryDelay?: number | ((retryAttempt: number) => number)\n  staleTime?: number\n  cacheTime?: number\n  refetchInterval?: false | number\n  refetchIntervalInBackground?: boolean\n  refetchOnWindowFocus?: boolean\n  refetchOnMount?: boolean\n  onSuccess?: (data: TResult) => void\n  onError?: (err: TError) => void\n  onSettled?: (data: TResult | undefined, error: TError | null) => void\n  isDataEqual?: (oldData: unknown, newData: unknown) => boolean\n  useErrorBoundary?: boolean\n  queryFn?: QueryFunction<TResult>\n  queryKeySerializerFn?: QueryKeySerializerFunction\n  queryFnParamsFilter?: (args: ArrayQueryKey) => ArrayQueryKey\n  suspense?: boolean\n  initialData?: TResult | InitialDataFunction<TResult>\n  initialStale?: boolean | InitialStaleFunction\n  infinite?: true\n}\n\nexport interface QueryConfig<TResult, TError = unknown>\n  extends BaseQueryConfig<TResult, TError> {}\n\nexport interface PaginatedQueryConfig<TResult, TError = unknown>\n  extends BaseQueryConfig<TResult, TError> {}\n\nexport interface InfiniteQueryConfig<TResult, TError = unknown>\n  extends BaseQueryConfig<TResult[], TError> {\n  getFetchMore: (lastPage: TResult, allPages: TResult[]) => unknown\n}\n\nexport type IsFetchingMoreValue = 'previous' | 'next' | false\n\nexport enum QueryStatus {\n  Idle = 'idle',\n  Loading = 'loading',\n  Error = 'error',\n  Success = 'success',\n}\n\nexport interface QueryResultBase<TResult, TError = unknown> {\n  status: QueryStatus\n  error: TError | null\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n  isIdle: boolean\n  isFetching: boolean\n  isStale: boolean\n  failureCount: number\n  query: Query<TResult, TError>\n  updatedAt: number\n  refetch: () => Promise<void>\n  clear: () => void\n}\n\nexport interface QueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult, TError> {\n  data: TResult | undefined\n}\n\nexport interface PaginatedQueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult, TError> {\n  resolvedData: TResult | undefined\n  latestData: TResult | undefined\n}\n\nexport interface InfiniteQueryResult<TResult, TError = unknown>\n  extends QueryResultBase<TResult[], TError> {\n  data: TResult[] | undefined\n  isFetchingMore?: IsFetchingMoreValue\n  canFetchMore: boolean | undefined\n  fetchMore: (\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ) => Promise<TResult[] | undefined> | undefined\n}\n\nexport interface MutateConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> {\n  onSuccess?: (data: TResult, variables: TVariables) => Promise<void> | void\n  onError?: (\n    error: TError,\n    variables: TVariables,\n    snapshotValue: TSnapshot\n  ) => Promise<void> | void\n  onSettled?: (\n    data: undefined | TResult,\n    error: TError | null,\n    variables: TVariables,\n    snapshotValue?: TSnapshot\n  ) => Promise<void> | void\n  throwOnError?: boolean\n}\n\nexport interface MutationConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> extends MutateConfig<TResult, TError, TVariables, TSnapshot> {\n  onMutate?: (variables: TVariables) => Promise<TSnapshot> | TSnapshot\n  useErrorBoundary?: boolean\n  suspense?: boolean\n}\n\nexport type MutationFunction<TResult, TVariables = unknown> = (\n  variables: TVariables\n) => Promise<TResult>\n\nexport type MutateFunction<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> = (\n  variables?: TVariables,\n  config?: MutateConfig<TResult, TError, TVariables, TSnapshot>\n) => Promise<TResult | undefined>\n\nexport type MutationResultPair<TResult, TError, TVariables, TSnapshot> = [\n  MutateFunction<TResult, TError, TVariables, TSnapshot>,\n  MutationResult<TResult, TError>\n]\n\nexport interface MutationResult<TResult, TError = unknown> {\n  status: QueryStatus\n  data: TResult | undefined\n  error: TError | null\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n  reset: () => void\n}\n\nexport interface ReactQueryConfig<TResult = unknown, TError = unknown> {\n  queries?: ReactQueryQueriesConfig<TResult, TError>\n  shared?: ReactQuerySharedConfig\n  mutations?: ReactQueryMutationsConfig<TResult, TError>\n}\n\nexport interface ReactQuerySharedConfig {\n  suspense?: boolean\n}\n\nexport interface ReactQueryQueriesConfig<TResult, TError>\n  extends BaseQueryConfig<TResult, TError> {}\n\nexport interface ReactQueryMutationsConfig<\n  TResult,\n  TError = unknown,\n  TVariables = unknown,\n  TSnapshot = unknown\n> extends MutationConfig<TResult, TError, TVariables, TSnapshot> {}\n","import { QueryConfig, QueryStatus, QueryKey, QueryFunction } from './types'\n\n// TYPES\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\ntype ConsoleFunction = (...args: any[]) => void\n\nexport interface ConsoleObject {\n  log: ConsoleFunction\n  warn: ConsoleFunction\n  error: ConsoleFunction\n}\n\n// UTILS\n\nlet _uid = 0\nexport const uid = () => _uid++\nexport const cancelledError = {}\nexport const globalStateListeners = []\nexport const isServer = typeof window === 'undefined'\nexport function noop(): void {\n  return void 0\n}\nexport function identity<T>(d: T): T {\n  return d\n}\nexport let Console: ConsoleObject = console || {\n  error: noop,\n  warn: noop,\n  log: noop,\n}\n\nexport function setConsole(c: ConsoleObject) {\n  Console = c\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nfunction stableStringifyReplacer(_key: string, value: any): unknown {\n  if (typeof value === 'function') {\n    throw new Error('Cannot stringify non JSON value')\n  }\n\n  if (isObject(value)) {\n    return Object.keys(value)\n      .sort()\n      .reduce((result, key) => {\n        result[key] = value[key]\n        return result\n      }, {} as any)\n  }\n\n  return value\n}\n\nexport function stableStringify(value: any): string {\n  return JSON.stringify(value, stableStringifyReplacer)\n}\n\nexport function isObject(a: unknown): boolean {\n  return a && typeof a === 'object' && !Array.isArray(a)\n}\n\nexport function deepIncludes(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (typeof a === 'object') {\n    return !Object.keys(b).some(key => !deepIncludes(a[key], b[key]))\n  }\n\n  return false\n}\n\nexport function isDocumentVisible(): boolean {\n  // document global can be unavailable in react native\n  if (typeof document === 'undefined') {\n    return true\n  }\n  return [undefined, 'visible', 'prerender'].includes(document.visibilityState)\n}\n\nexport function isOnline(): boolean {\n  return navigator.onLine === undefined || navigator.onLine\n}\n\nexport function getQueryArgs<TResult, TError, TOptions = undefined>(\n  args: any[]\n): [QueryKey, QueryConfig<TResult, TError>, TOptions] {\n  let queryKey: QueryKey\n  let queryFn: QueryFunction<TResult> | undefined\n  let config: QueryConfig<TResult, TError> | undefined\n  let options: TOptions\n\n  if (isObject(args[0])) {\n    queryKey = args[0].queryKey\n    queryFn = args[0].queryFn\n    config = args[0].config\n    options = args[1]\n  } else if (isObject(args[1])) {\n    queryKey = args[0]\n    config = args[1]\n    options = args[2]\n  } else {\n    queryKey = args[0]\n    queryFn = args[1]\n    config = args[2]\n    options = args[3]\n  }\n\n  config = config || {}\n\n  if (queryFn) {\n    config = { ...config, queryFn }\n  }\n\n  return [queryKey, config, options]\n}\n\nexport function deepEqual(a: any, b: any): boolean {\n  return equal(a, b, true)\n}\n\nexport function shallowEqual(a: any, b: any): boolean {\n  return equal(a, b, false)\n}\n\n// This deep-equal is directly based on https://github.com/epoberezkin/fast-deep-equal.\n// The parts for comparing any non-JSON-supported values has been removed\nfunction equal(a: any, b: any, deep: boolean, depth = 0): boolean {\n  if (a === b) return true\n\n  if (\n    (deep || !depth) &&\n    a &&\n    b &&\n    typeof a == 'object' &&\n    typeof b == 'object'\n  ) {\n    let length, i\n    if (Array.isArray(a)) {\n      length = a.length\n      // eslint-disable-next-line eqeqeq\n      if (length != b.length) return false\n      for (i = length; i-- !== 0; )\n        if (!equal(a[i], b[i], deep, depth + 1)) return false\n      return true\n    }\n\n    if (a.valueOf !== Object.prototype.valueOf)\n      return a.valueOf() === b.valueOf()\n\n    const keys = Object.keys(a)\n    length = keys.length\n    if (length !== Object.keys(b).length) return false\n\n    for (i = length; i-- !== 0; )\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false\n\n    for (i = length; i-- !== 0; ) {\n      const key = keys[i]\n\n      if (!equal(a[key], b[key], deep, depth + 1)) return false\n    }\n\n    return true\n  }\n\n  // true if both NaN, false otherwise\n  // eslint-disable-next-line no-self-compare\n  return a !== a && b !== b\n}\n\nexport function getStatusProps<T extends QueryStatus>(status: T) {\n  return {\n    status,\n    isLoading: status === QueryStatus.Loading,\n    isSuccess: status === QueryStatus.Success,\n    isError: status === QueryStatus.Error,\n    isIdle: status === QueryStatus.Idle,\n  }\n}\n","import { stableStringify, identity, deepEqual } from './utils'\nimport {\n  ArrayQueryKey,\n  QueryKey,\n  QueryKeySerializerFunction,\n  ReactQueryConfig,\n} from './types'\n\n// TYPES\n\nexport interface ReactQueryConfigRef {\n  current: ReactQueryConfig\n}\n\n// CONFIG\n\nexport const defaultQueryKeySerializerFn: QueryKeySerializerFunction = (\n  queryKey: QueryKey\n): [string, ArrayQueryKey] => {\n  try {\n    let arrayQueryKey: ArrayQueryKey = Array.isArray(queryKey)\n      ? queryKey\n      : [queryKey]\n    const queryHash = stableStringify(arrayQueryKey)\n    arrayQueryKey = JSON.parse(queryHash)\n    return [queryHash, arrayQueryKey]\n  } catch {\n    throw new Error('A valid query key is required!')\n  }\n}\n\nexport const DEFAULT_CONFIG: ReactQueryConfig = {\n  shared: {\n    suspense: false,\n  },\n  queries: {\n    queryKeySerializerFn: defaultQueryKeySerializerFn,\n    enabled: true,\n    retry: 3,\n    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\n    staleTime: 0,\n    cacheTime: 5 * 60 * 1000,\n    refetchOnWindowFocus: true,\n    refetchInterval: false,\n    queryFnParamsFilter: identity,\n    refetchOnMount: true,\n    isDataEqual: deepEqual,\n    useErrorBoundary: false,\n  },\n  mutations: {\n    throwOnError: false,\n    useErrorBoundary: false,\n  },\n}\n\nexport const defaultConfigRef: ReactQueryConfigRef = {\n  current: DEFAULT_CONFIG,\n}\n","import { uid, isServer, isDocumentVisible, Console } from './utils'\nimport { Query, QueryState, Action, ActionType } from './query'\nimport { BaseQueryConfig } from './types'\n\n// TYPES\n\nexport type OnStateUpdateFunction<TResult, TError> = (\n  state: QueryState<TResult, TError>\n) => void\n\n// CLASS\n\nexport class QueryInstance<TResult, TError> {\n  id: number\n  config: BaseQueryConfig<TResult, TError>\n\n  private query: Query<TResult, TError>\n  private refetchIntervalId?: number\n  private stateUpdateListener?: OnStateUpdateFunction<TResult, TError>\n\n  constructor(\n    query: Query<TResult, TError>,\n    onStateUpdate?: OnStateUpdateFunction<TResult, TError>\n  ) {\n    this.id = uid()\n    this.stateUpdateListener = onStateUpdate\n    this.query = query\n    this.config = {}\n  }\n\n  clearInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  updateConfig(config: BaseQueryConfig<TResult, TError>): void {\n    const oldConfig = this.config\n\n    // Update the config\n    this.config = config\n\n    if (!isServer) {\n      if (oldConfig?.refetchInterval === config.refetchInterval) {\n        return\n      }\n\n      this.query.clearIntervals()\n\n      const minInterval = Math.min(\n        ...this.query.instances.map(d => d.config.refetchInterval || Infinity)\n      )\n\n      if (\n        !this.refetchIntervalId &&\n        minInterval > 0 &&\n        minInterval < Infinity\n      ) {\n        this.refetchIntervalId = setInterval(() => {\n          if (\n            this.query.instances.some(d => d.config.enabled) &&\n            (isDocumentVisible() ||\n              this.query.instances.some(\n                d => d.config.refetchIntervalInBackground\n              ))\n          ) {\n            this.query.fetch()\n          }\n        }, minInterval)\n      }\n    }\n  }\n\n  async run(): Promise<void> {\n    try {\n      // Perform the refetch for this query if necessary\n      if (\n        this.query.instances.some(d => d.config.enabled) && // Don't auto refetch if disabled\n        !(this.config.suspense && this.query.state.isFetched) && // Don't refetch if in suspense mode and the data is already fetched\n        this.query.state.isStale && // Only refetch if stale\n        (this.config.refetchOnMount || this.query.instances.length === 1)\n      ) {\n        await this.query.fetch()\n      }\n    } catch (error) {\n      Console.error(error)\n    }\n  }\n\n  unsubscribe(preventGC?: boolean): void {\n    this.query.instances = this.query.instances.filter(d => d.id !== this.id)\n\n    if (!this.query.instances.length) {\n      this.clearInterval()\n      this.query.cancel()\n\n      if (!preventGC && !isServer) {\n        // Schedule garbage collection\n        this.query.scheduleGarbageCollection()\n      }\n    }\n  }\n\n  onStateUpdate(\n    state: QueryState<TResult, TError>,\n    action: Action<TResult, TError>\n  ): void {\n    if (action.type === ActionType.Success && state.isSuccess) {\n      this.config.onSuccess?.(state.data!)\n      this.config.onSettled?.(state.data!, null)\n    }\n\n    if (action.type === ActionType.Error && state.isError) {\n      this.config.onError?.(state.error!)\n      this.config.onSettled?.(undefined, state.error!)\n    }\n\n    this.stateUpdateListener?.(state)\n  }\n}\n","import {\n  isServer,\n  functionalUpdate,\n  cancelledError,\n  isDocumentVisible,\n  noop,\n  Console,\n  getStatusProps,\n  shallowEqual,\n  Updater,\n} from './utils'\nimport { QueryInstance, OnStateUpdateFunction } from './queryInstance'\nimport {\n  ArrayQueryKey,\n  InfiniteQueryConfig,\n  InitialDataFunction,\n  IsFetchingMoreValue,\n  QueryConfig,\n  QueryFunction,\n  QueryStatus,\n} from './types'\nimport { QueryCache } from './queryCache'\n\n// TYPES\n\ninterface QueryInitConfig<TResult, TError> {\n  queryCache: QueryCache\n  queryKey: ArrayQueryKey\n  queryHash: string\n  config: QueryConfig<TResult, TError>\n  notifyGlobalListeners: (query: Query<TResult, TError>) => void\n}\n\nexport interface QueryState<TResult, TError> {\n  canFetchMore?: boolean\n  data?: TResult\n  error: TError | null\n  failureCount: number\n  isError: boolean\n  isFetched: boolean\n  isFetching: boolean\n  isFetchingMore?: IsFetchingMoreValue\n  isIdle: boolean\n  isLoading: boolean\n  isStale: boolean\n  isSuccess: boolean\n  status: QueryStatus\n  throwInErrorBoundary?: boolean\n  updatedAt: number\n}\n\ninterface FetchOptions {\n  fetchMore?: FetchMoreOptions\n}\n\nexport interface FetchMoreOptions {\n  fetchMoreVariable?: unknown\n  previous: boolean\n}\n\nexport enum ActionType {\n  Failed = 'Failed',\n  MarkStale = 'MarkStale',\n  Fetch = 'Fetch',\n  Success = 'Success',\n  Error = 'Error',\n  SetState = 'SetState',\n}\n\ninterface FailedAction {\n  type: ActionType.Failed\n}\n\ninterface MarkStaleAction {\n  type: ActionType.MarkStale\n}\n\ninterface FetchAction {\n  type: ActionType.Fetch\n}\n\ninterface SuccessAction<TResult> {\n  type: ActionType.Success\n  updater: Updater<TResult | undefined, TResult>\n  isStale: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: ActionType.Error\n  cancelled: boolean\n  error: TError\n}\n\ninterface SetStateAction<TResult, TError> {\n  type: ActionType.SetState\n  updater: Updater<QueryState<TResult, TError>, QueryState<TResult, TError>>\n}\n\nexport type Action<TResult, TError> =\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | MarkStaleAction\n  | SetStateAction<TResult, TError>\n  | SuccessAction<TResult>\n\n// CLASS\n\nexport class Query<TResult, TError> {\n  queryCache: QueryCache\n  queryKey: ArrayQueryKey\n  queryHash: string\n  config: QueryConfig<TResult, TError>\n  instances: QueryInstance<TResult, TError>[]\n  state: QueryState<TResult, TError>\n  shouldContinueRetryOnFocus?: boolean\n  promise?: Promise<TResult | undefined>\n\n  private fetchMoreVariable?: unknown\n  private pageVariables?: ArrayQueryKey[]\n  private cacheTimeout?: number\n  private retryTimeout?: number\n  private staleTimeout?: number\n  private cancelPromises?: () => void\n  private cancelled?: typeof cancelledError | null\n  private notifyGlobalListeners: (query: Query<TResult, TError>) => void\n\n  constructor(init: QueryInitConfig<TResult, TError>) {\n    this.config = init.config\n    this.queryCache = init.queryCache\n    this.queryKey = init.queryKey\n    this.queryHash = init.queryHash\n    this.notifyGlobalListeners = init.notifyGlobalListeners\n    this.instances = []\n    this.state = getDefaultState(init.config)\n\n    if (init.config.infinite) {\n      const infiniteConfig = init.config as InfiniteQueryConfig<TResult, TError>\n      const infiniteData = (this.state.data as unknown) as TResult[] | undefined\n\n      if (\n        typeof infiniteData !== 'undefined' &&\n        typeof this.state.canFetchMore === 'undefined'\n      ) {\n        this.fetchMoreVariable = infiniteConfig.getFetchMore(\n          infiniteData[infiniteData.length - 1],\n          infiniteData\n        )\n        this.state.canFetchMore = Boolean(this.fetchMoreVariable)\n      }\n\n      // Here we seed the pageVariables for the query\n      if (!this.pageVariables) {\n        this.pageVariables = [[...this.queryKey]]\n      }\n    }\n  }\n\n  private dispatch(action: Action<TResult, TError>): void {\n    const newState = queryReducer(this.state, action)\n\n    // Only update state if something has changed\n    if (!shallowEqual(this.state, newState)) {\n      this.state = newState\n      this.instances.forEach(d => d.onStateUpdate(newState, action))\n      this.notifyGlobalListeners(this)\n    }\n  }\n\n  scheduleStaleTimeout(): void {\n    if (isServer) {\n      return\n    }\n\n    this.clearStaleTimeout()\n\n    if (this.state.isStale) {\n      return\n    }\n\n    if (this.config.staleTime === Infinity) {\n      return\n    }\n\n    this.staleTimeout = setTimeout(() => {\n      this.invalidate()\n    }, this.config.staleTime)\n  }\n\n  invalidate(): void {\n    this.clearStaleTimeout()\n\n    if (!this.queryCache.queries[this.queryHash]) {\n      return\n    }\n\n    if (this.state.isStale) {\n      return\n    }\n\n    this.dispatch({ type: ActionType.MarkStale })\n  }\n\n  scheduleGarbageCollection(): void {\n    this.clearCacheTimeout()\n\n    if (!this.queryCache.queries[this.queryHash]) {\n      return\n    }\n\n    if (this.config.cacheTime === Infinity) {\n      return\n    }\n\n    this.cacheTimeout = setTimeout(\n      () => {\n        this.clear()\n      },\n      typeof this.state.data === 'undefined' &&\n        this.state.status !== QueryStatus.Error\n        ? 0\n        : this.config.cacheTime\n    )\n  }\n\n  async refetch(): Promise<void> {\n    try {\n      await this.fetch()\n    } catch (error) {\n      Console.error(error)\n    }\n  }\n\n  heal(): void {\n    // Stop the query from being garbage collected\n    this.clearCacheTimeout()\n\n    // Mark the query as not cancelled\n    this.cancelled = null\n  }\n\n  cancel(): void {\n    this.cancelled = cancelledError\n\n    if (this.cancelPromises) {\n      this.cancelPromises()\n    }\n\n    delete this.promise\n  }\n\n  clearIntervals(): void {\n    this.instances.forEach(instance => {\n      instance.clearInterval()\n    })\n  }\n\n  private clearStaleTimeout() {\n    if (this.staleTimeout) {\n      clearTimeout(this.staleTimeout)\n      this.staleTimeout = undefined\n    }\n  }\n\n  private clearCacheTimeout() {\n    if (this.cacheTimeout) {\n      clearTimeout(this.cacheTimeout)\n      this.cacheTimeout = undefined\n    }\n  }\n\n  private clearRetryTimeout() {\n    if (this.retryTimeout) {\n      clearTimeout(this.retryTimeout)\n      this.retryTimeout = undefined\n    }\n  }\n\n  private setState(\n    updater: Updater<QueryState<TResult, TError>, QueryState<TResult, TError>>\n  ): void {\n    this.dispatch({ type: ActionType.SetState, updater })\n  }\n\n  setData(updater: Updater<TResult | undefined, TResult>): void {\n    const isStale = this.config.staleTime === 0\n    // Set data and mark it as cached\n    this.dispatch({\n      type: ActionType.Success,\n      updater,\n      isStale,\n    })\n\n    if (!isStale) {\n      // Schedule a fresh invalidation!\n      this.scheduleStaleTimeout()\n    }\n  }\n\n  clear(): void {\n    this.clearStaleTimeout()\n    this.clearCacheTimeout()\n    this.clearRetryTimeout()\n    this.clearIntervals()\n    this.cancel()\n    delete this.queryCache.queries[this.queryHash]\n    this.notifyGlobalListeners(this)\n  }\n\n  subscribe(\n    onStateUpdate?: OnStateUpdateFunction<TResult, TError>\n  ): QueryInstance<TResult, TError> {\n    const instance = new QueryInstance(this, onStateUpdate)\n    this.instances.push(instance)\n    this.heal()\n    return instance\n  }\n\n  // Set up the core fetcher function\n  private async tryFetchData(\n    fn: QueryFunction<TResult>,\n    args: ArrayQueryKey\n  ): Promise<TResult> {\n    try {\n      // Perform the query\n      const promiseOrValue = fn(...this.config.queryFnParamsFilter!(args))\n\n      this.cancelPromises = () => (promiseOrValue as any)?.cancel?.()\n\n      const data = await promiseOrValue\n      delete this.shouldContinueRetryOnFocus\n\n      delete this.cancelPromises\n      if (this.cancelled) throw this.cancelled\n\n      return data\n    } catch (error) {\n      delete this.cancelPromises\n      if (this.cancelled) throw this.cancelled\n\n      // Do we need to retry the request?\n      if (\n        this.config.retry === true ||\n        this.state.failureCount < this.config.retry! ||\n        (typeof this.config.retry === 'function' &&\n          this.config.retry(this.state.failureCount, error))\n      ) {\n        // If we retry, increase the failureCount\n        this.dispatch({ type: ActionType.Failed })\n\n        // Only retry if the document is visible\n        if (!isDocumentVisible()) {\n          // set this flag to continue retries on focus\n          this.shouldContinueRetryOnFocus = true\n          // Resolve a\n          return new Promise(noop)\n        }\n\n        delete this.shouldContinueRetryOnFocus\n\n        // Determine the retryDelay\n        const delay = functionalUpdate(\n          this.config.retryDelay,\n          this.state.failureCount\n        )\n\n        // Return a new promise with the retry\n        return await new Promise((resolve, reject) => {\n          // Keep track of the retry timeout\n          this.retryTimeout = setTimeout(async () => {\n            if (this.cancelled) return reject(this.cancelled)\n\n            try {\n              const data = await this.tryFetchData(fn, args)\n              if (this.cancelled) return reject(this.cancelled)\n              resolve(data)\n            } catch (error) {\n              if (this.cancelled) return reject(this.cancelled)\n              reject(error)\n            }\n          }, delay)\n        })\n      }\n\n      throw error\n    }\n  }\n\n  async fetch(options?: FetchOptions): Promise<TResult | undefined> {\n    let queryFn = this.config.queryFn\n\n    if (!queryFn) {\n      return\n    }\n\n    // If we are already fetching, return current promise\n    if (this.promise) {\n      return this.promise\n    }\n\n    if (this.config.infinite) {\n      const infiniteConfig = this.config as InfiniteQueryConfig<TResult, TError>\n      const infiniteData = (this.state.data as unknown) as TResult[] | undefined\n      const fetchMore = options?.fetchMore\n\n      const originalQueryFn = queryFn\n\n      queryFn = async () => {\n        const data: TResult[] = []\n        const pageVariables = this.pageVariables ? [...this.pageVariables] : []\n        const rebuiltPageVariables: ArrayQueryKey[] = []\n\n        do {\n          const args = pageVariables.shift()!\n\n          if (!data.length) {\n            // the first page query doesn't need to be rebuilt\n            data.push(await originalQueryFn(...args))\n            rebuiltPageVariables.push(args)\n          } else {\n            // get an up-to-date cursor based on the previous data set\n\n            const nextCursor = infiniteConfig.getFetchMore(\n              data[data.length - 1],\n              data\n            )\n\n            // break early if there's no next cursor\n            // otherwise we'll start from the beginning\n            // which will cause unwanted duplication\n            if (!nextCursor) {\n              break\n            }\n\n            const pageArgs = [\n              // remove the last argument (the previously saved cursor)\n              ...args.slice(0, -1),\n              nextCursor,\n            ] as ArrayQueryKey\n\n            data.push(await originalQueryFn(...pageArgs))\n            rebuiltPageVariables.push(pageArgs)\n          }\n        } while (pageVariables.length)\n\n        this.fetchMoreVariable = infiniteConfig.getFetchMore(\n          data[data.length - 1],\n          data\n        )\n        this.state.canFetchMore = Boolean(this.fetchMoreVariable)\n        this.pageVariables = rebuiltPageVariables\n\n        return (data as unknown) as TResult\n      }\n\n      if (fetchMore) {\n        queryFn = async (...args: ArrayQueryKey) => {\n          try {\n            const { fetchMoreVariable, previous } = fetchMore\n\n            this.setState(old => ({\n              ...old,\n              isFetchingMore: previous ? 'previous' : 'next',\n            }))\n\n            const newArgs = [...args, fetchMoreVariable] as ArrayQueryKey\n\n            if (this.pageVariables) {\n              this.pageVariables[previous ? 'unshift' : 'push'](newArgs)\n            } else {\n              this.pageVariables = [newArgs]\n            }\n\n            const newData = await originalQueryFn(...newArgs)\n\n            let data\n\n            if (!infiniteData) {\n              data = [newData]\n            } else if (previous) {\n              data = [newData, ...infiniteData]\n            } else {\n              data = [...infiniteData, newData]\n            }\n\n            this.fetchMoreVariable = infiniteConfig.getFetchMore(newData, data)\n            this.state.canFetchMore = Boolean(this.fetchMoreVariable)\n\n            return (data as unknown) as TResult\n          } finally {\n            this.setState(old => ({\n              ...old,\n              isFetchingMore: false,\n            }))\n          }\n        }\n      }\n    }\n\n    this.promise = (async () => {\n      // If there are any retries pending for this query, kill them\n      this.cancelled = null\n\n      try {\n        // Set up the query refreshing state\n        this.dispatch({ type: ActionType.Fetch })\n\n        // Try to get the data\n        const data = await this.tryFetchData(queryFn!, this.queryKey)\n\n        this.setData(old => (this.config.isDataEqual!(old, data) ? old! : data))\n\n        delete this.promise\n\n        return data\n      } catch (error) {\n        this.dispatch({\n          type: ActionType.Error,\n          cancelled: error === this.cancelled,\n          error,\n        })\n\n        delete this.promise\n\n        if (error !== this.cancelled) {\n          throw error\n        }\n\n        return\n      }\n    })()\n\n    return this.promise\n  }\n\n  fetchMore(\n    fetchMoreVariable?: unknown,\n    options?: FetchMoreOptions\n  ): Promise<TResult | undefined> {\n    return this.fetch({\n      fetchMore: {\n        fetchMoreVariable: fetchMoreVariable ?? this.fetchMoreVariable,\n        previous: options?.previous || false,\n      },\n    })\n  }\n}\n\nfunction getDefaultState<TResult, TError>(\n  config: QueryConfig<TResult, TError>\n): QueryState<TResult, TError> {\n  const initialData =\n    typeof config.initialData === 'function'\n      ? (config.initialData as InitialDataFunction<TResult>)()\n      : config.initialData\n\n  const hasInitialData = typeof initialData !== 'undefined'\n\n  const isStale =\n    !config.enabled ||\n    (typeof config.initialStale === 'function'\n      ? config.initialStale()\n      : config.initialStale ?? !hasInitialData)\n\n  const initialStatus = hasInitialData\n    ? QueryStatus.Success\n    : config.enabled\n    ? QueryStatus.Loading\n    : QueryStatus.Idle\n\n  return {\n    ...getStatusProps(initialStatus),\n    error: null,\n    isFetched: false,\n    isFetching: initialStatus === QueryStatus.Loading,\n    failureCount: 0,\n    isStale,\n    data: initialData,\n    updatedAt: hasInitialData ? Date.now() : 0,\n  }\n}\n\nexport function queryReducer<TResult, TError>(\n  state: QueryState<TResult, TError>,\n  action: Action<TResult, TError>\n): QueryState<TResult, TError> {\n  switch (action.type) {\n    case ActionType.Failed:\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case ActionType.MarkStale:\n      return {\n        ...state,\n        isStale: true,\n      }\n    case ActionType.Fetch:\n      const status =\n        typeof state.data !== 'undefined'\n          ? QueryStatus.Success\n          : QueryStatus.Loading\n      return {\n        ...state,\n        ...getStatusProps(status),\n        isFetching: true,\n        failureCount: 0,\n      }\n    case ActionType.Success:\n      return {\n        ...state,\n        ...getStatusProps(QueryStatus.Success),\n        data: functionalUpdate(action.updater, state.data),\n        error: null,\n        isStale: action.isStale,\n        isFetched: true,\n        isFetching: false,\n        updatedAt: Date.now(),\n        failureCount: 0,\n      }\n    case ActionType.Error:\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n        isFetched: true,\n        isFetching: false,\n        isStale: true,\n        ...(!action.cancelled && {\n          ...getStatusProps(QueryStatus.Error),\n          error: action.error,\n          throwInErrorBoundary: true,\n        }),\n      }\n    case ActionType.SetState:\n      return functionalUpdate(action.updater, state)\n    default:\n      return state\n  }\n}\n","import {\n  isServer,\n  getQueryArgs,\n  deepIncludes,\n  Console,\n  isObject,\n  Updater,\n} from './utils'\nimport { defaultConfigRef, ReactQueryConfigRef } from './config'\nimport { Query } from './query'\nimport {\n  QueryConfig,\n  QueryKey,\n  QueryKeyWithoutObject,\n  ReactQueryConfig,\n  QueryKeyWithoutArray,\n  QueryKeyWithoutObjectAndArray,\n  TupleQueryFunction,\n  TupleQueryKey,\n} from './types'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  frozen?: boolean\n  defaultConfig?: ReactQueryConfig\n}\n\ninterface ClearOptions {\n  notify?: boolean\n}\n\ninterface PrefetchQueryOptions {\n  force?: boolean\n  throwOnError?: boolean\n}\n\ninterface InvalidateQueriesOptions extends QueryPredicateOptions {\n  refetchActive?: boolean\n  refetchInactive?: boolean\n  throwOnError?: boolean\n}\n\ninterface QueryPredicateOptions {\n  exact?: boolean\n}\n\ntype QueryPredicate = QueryKey | QueryPredicateFn | true\n\ntype QueryPredicateFn = (query: Query<unknown, unknown>) => boolean\n\nexport interface PrefetchQueryObjectConfig<\n  TResult,\n  TError,\n  TKey extends TupleQueryKey\n> {\n  queryKey: QueryKey\n  queryFn?: TupleQueryFunction<TResult, TKey>\n  config?: QueryConfig<TResult, TError>\n  options?: PrefetchQueryOptions\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any>\n}\n\ntype QueryCacheListener = (\n  cache: QueryCache,\n  query?: Query<unknown, unknown>\n) => void\n\n// CLASS\n\nexport class QueryCache {\n  queries: QueryHashMap\n  isFetching: number\n\n  private config: QueryCacheConfig\n  private configRef: ReactQueryConfigRef\n  private globalListeners: QueryCacheListener[]\n\n  constructor(config?: QueryCacheConfig) {\n    this.config = config || {}\n\n    // A frozen cache does not add new queries to the cache\n    this.globalListeners = []\n\n    this.configRef = this.config.defaultConfig\n      ? {\n          current: {\n            shared: {\n              ...defaultConfigRef.current.shared,\n              ...this.config.defaultConfig.shared,\n            },\n            queries: {\n              ...defaultConfigRef.current.queries,\n              ...this.config.defaultConfig.queries,\n            },\n            mutations: {\n              ...defaultConfigRef.current.mutations,\n              ...this.config.defaultConfig.mutations,\n            },\n          },\n        }\n      : defaultConfigRef\n\n    this.queries = {}\n    this.isFetching = 0\n  }\n\n  private notifyGlobalListeners(query?: Query<any, any>) {\n    this.isFetching = Object.values(this.queries).reduce(\n      (acc, query) => (query.state.isFetching ? acc + 1 : acc),\n      0\n    )\n\n    this.globalListeners.forEach(d => d(this, query))\n  }\n\n  getDefaultConfig() {\n    return this.configRef.current\n  }\n\n  subscribe(listener: QueryCacheListener): () => void {\n    this.globalListeners.push(listener)\n    return () => {\n      this.globalListeners.splice(this.globalListeners.indexOf(listener), 1)\n    }\n  }\n\n  clear(options?: ClearOptions): void {\n    Object.values(this.queries).forEach(query => query.clear())\n    this.queries = {}\n    if (options?.notify) {\n      this.notifyGlobalListeners()\n    }\n  }\n\n  getQueries<TResult = unknown, TError = unknown>(\n    predicate: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): Query<TResult, TError>[] {\n    if (predicate === true) {\n      return Object.values(this.queries)\n    }\n\n    let predicateFn: QueryPredicateFn\n\n    if (typeof predicate === 'function') {\n      predicateFn = predicate as QueryPredicateFn\n    } else {\n      const [queryHash, queryKey] = this.configRef.current.queries!\n        .queryKeySerializerFn!(predicate)\n\n      predicateFn = d =>\n        options?.exact\n          ? d.queryHash === queryHash\n          : deepIncludes(d.queryKey, queryKey)\n    }\n\n    return Object.values(this.queries).filter(predicateFn)\n  }\n\n  getQuery<TResult, TError = unknown>(\n    predicate: QueryPredicate\n  ): Query<TResult, TError> | undefined {\n    return this.getQueries<TResult, TError>(predicate, { exact: true })[0]\n  }\n\n  getQueryData<TResult>(predicate: QueryPredicate): TResult | undefined {\n    return this.getQuery<TResult>(predicate)?.state.data\n  }\n\n  removeQueries(\n    predicate: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): void {\n    this.getQueries(predicate, options).forEach(query => query.clear())\n  }\n\n  cancelQueries(\n    predicate: QueryPredicate,\n    options?: QueryPredicateOptions\n  ): void {\n    this.getQueries(predicate, options).forEach(query => query.cancel())\n  }\n\n  async invalidateQueries(\n    predicate: QueryPredicate,\n    options?: InvalidateQueriesOptions\n  ): Promise<void> {\n    const { refetchActive = true, refetchInactive = false, throwOnError } =\n      options || {}\n\n    try {\n      await Promise.all(\n        this.getQueries(predicate, options).map(query => {\n          if (query.instances.length) {\n            if (\n              refetchActive &&\n              query.instances.some(instance => instance.config.enabled)\n            ) {\n              return query.fetch()\n            }\n          } else {\n            if (refetchInactive) {\n              return query.fetch()\n            }\n          }\n\n          return query.invalidate()\n        })\n      )\n    } catch (err) {\n      if (throwOnError) {\n        throw err\n      }\n    }\n  }\n\n  resetErrorBoundaries(): void {\n    this.getQueries(true).forEach(query => {\n      query.state.throwInErrorBoundary = false\n    })\n  }\n\n  buildQuery<TResult, TError = unknown>(\n    userQueryKey: QueryKey,\n    queryConfig: QueryConfig<TResult, TError> = {}\n  ): Query<TResult, TError> {\n    const config = {\n      ...this.configRef.current.shared!,\n      ...this.configRef.current.queries!,\n      ...queryConfig,\n    } as QueryConfig<TResult, TError>\n\n    const [queryHash, queryKey] = config.queryKeySerializerFn!(userQueryKey)\n\n    let query\n\n    if (this.queries[queryHash]) {\n      query = this.queries[queryHash] as Query<TResult, TError>\n      query.config = config\n    }\n\n    if (!query) {\n      query = new Query<TResult, TError>({\n        queryCache: this,\n        queryKey,\n        queryHash,\n        config,\n        notifyGlobalListeners: query => {\n          this.notifyGlobalListeners(query)\n        },\n      })\n\n      // If the query started with data, schedule\n      // a stale timeout\n      if (!isServer && query.state.data) {\n        query.scheduleStaleTimeout()\n\n        // Simulate a query healing process\n        query.heal()\n        // Schedule for garbage collection in case\n        // nothing subscribes to this query\n        query.scheduleGarbageCollection()\n      }\n\n      if (!this.config.frozen) {\n        this.queries[queryHash] = query\n\n        if (isServer) {\n          this.notifyGlobalListeners()\n        } else {\n          // Here, we setTimeout so as to not trigger\n          // any setState's in parent components in the\n          // middle of the render phase.\n          setTimeout(() => {\n            this.notifyGlobalListeners()\n          })\n        }\n      }\n    }\n\n    return query\n  }\n\n  // Parameter syntax with optional prefetch options\n  async prefetchQuery<TResult, TError, TKey extends QueryKeyWithoutObject>(\n    queryKey: TKey,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with config and optional prefetch options\n  async prefetchQuery<TResult, TError, TKey extends QueryKeyWithoutObject>(\n    queryKey: TKey,\n    config: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with query function and optional prefetch options\n  async prefetchQuery<\n    TResult,\n    TError,\n    TKey extends QueryKeyWithoutObjectAndArray\n  >(\n    queryKey: TKey,\n    queryFn: TupleQueryFunction<TResult, [TKey]>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  async prefetchQuery<TResult, TError, TKey extends TupleQueryKey>(\n    queryKey: TKey,\n    queryFn: TupleQueryFunction<TResult, TKey>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Parameter syntax with query function, config and optional prefetch options\n  async prefetchQuery<\n    TResult,\n    TError,\n    TKey extends QueryKeyWithoutObjectAndArray\n  >(\n    queryKey: TKey,\n    queryFn: TupleQueryFunction<TResult, [TKey]>,\n    queryConfig: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  async prefetchQuery<TResult, TError, TKey extends TupleQueryKey>(\n    queryKey: TKey,\n    queryFn: TupleQueryFunction<TResult, TKey>,\n    queryConfig: QueryConfig<TResult, TError>,\n    options?: PrefetchQueryOptions\n  ): Promise<TResult | undefined>\n\n  // Object syntax\n  async prefetchQuery<TResult, TError, TKey extends QueryKeyWithoutArray>(\n    config: PrefetchQueryObjectConfig<TResult, TError, [TKey]>\n  ): Promise<TResult | undefined>\n\n  async prefetchQuery<TResult, TError, TKey extends TupleQueryKey>(\n    config: PrefetchQueryObjectConfig<TResult, TError, TKey>\n  ): Promise<TResult | undefined>\n\n  // Implementation\n  async prefetchQuery<TResult, TError>(\n    ...args: any[]\n  ): Promise<TResult | undefined> {\n    if (\n      isObject(args[1]) &&\n      (args[1].hasOwnProperty('throwOnError') ||\n        args[1].hasOwnProperty('force'))\n    ) {\n      args[3] = args[1]\n      args[1] = undefined\n      args[2] = undefined\n    }\n\n    const [queryKey, config, options] = getQueryArgs<\n      TResult,\n      TError,\n      PrefetchQueryOptions | undefined\n    >(args)\n    // https://github.com/tannerlinsley/react-query/issues/652\n    const configWithoutRetry = { retry: false, ...config }\n\n    try {\n      const query = this.buildQuery<TResult, TError>(\n        queryKey,\n        configWithoutRetry\n      )\n      if (options?.force || query.state.isStale) {\n        await query.fetch()\n      }\n      return query.state.data\n    } catch (err) {\n      if (options?.throwOnError) {\n        throw err\n      }\n      Console.error(err)\n      return\n    }\n  }\n\n  setQueryData<TResult, TError = unknown>(\n    queryKey: QueryKey,\n    updater: Updater<TResult | undefined, TResult>,\n    config: QueryConfig<TResult, TError> = {}\n  ) {\n    let query = this.getQuery<TResult, TError>(queryKey)\n\n    if (!query) {\n      query = this.buildQuery<TResult, TError>(queryKey, config)\n    }\n\n    query.setData(updater)\n  }\n}\n\nconst defaultQueryCache = makeQueryCache({ frozen: isServer })\nexport { defaultQueryCache as queryCache }\nexport const queryCaches = [defaultQueryCache]\n\nexport function makeQueryCache(config?: QueryCacheConfig) {\n  return new QueryCache(config)\n}\n","import { isOnline, isDocumentVisible, Console, isServer } from './utils'\nimport { queryCaches } from './queryCache'\n\ntype FocusHandler = () => void\n\nconst visibilityChangeEvent = 'visibilitychange'\nconst focusEvent = 'focus'\n\nconst onWindowFocus: FocusHandler = () => {\n  if (isDocumentVisible() && isOnline()) {\n    queryCaches.forEach(queryCache =>\n      queryCache\n        .invalidateQueries(query => {\n          if (!query.instances.length) {\n            return false\n          }\n\n          if (!query.instances.some(instance => instance.config.enabled)) {\n            return false\n          }\n\n          if (!query.state.isStale) {\n            return false\n          }\n\n          if (query.shouldContinueRetryOnFocus) {\n            // delete promise, so refetching will create new one\n            delete query.promise\n          }\n\n          return Boolean(query.config.refetchOnWindowFocus)\n        })\n        .catch(Console.error)\n    )\n  }\n}\n\nlet removePreviousHandler: (() => void) | void\n\nexport function setFocusHandler(callback: (callback: FocusHandler) => void) {\n  // Unsub the old watcher\n  if (removePreviousHandler) {\n    removePreviousHandler()\n  }\n  // Sub the new watcher\n  removePreviousHandler = callback(onWindowFocus)\n}\n\nsetFocusHandler((handleFocus: FocusHandler) => {\n  // Listen to visibillitychange and focus\n  if (!isServer && window?.addEventListener) {\n    window.addEventListener(visibilityChangeEvent, handleFocus, false)\n    window.addEventListener(focusEvent, handleFocus, false)\n\n    return () => {\n      // Be sure to unsubscribe if a new handler is set\n      window.removeEventListener(visibilityChangeEvent, handleFocus)\n      window.removeEventListener(focusEvent, handleFocus)\n    }\n  }\n  return\n})\n","import React from 'react'\n\nimport {\n  queryCache as defaultQueryCache,\n  queryCaches,\n  makeQueryCache,\n} from '../core'\nimport { QueryCache } from '../core/queryCache'\n\nexport const queryCacheContext = React.createContext(defaultQueryCache)\n\nexport const useQueryCache = () => React.useContext(queryCacheContext)\n\nexport interface ReactQueryCacheProviderProps {\n  queryCache?: QueryCache\n}\n\nexport const ReactQueryCacheProvider: React.FC<ReactQueryCacheProviderProps> = ({\n  queryCache,\n  children,\n}) => {\n  const resolvedQueryCache = React.useMemo(\n    () => queryCache || makeQueryCache(),\n    [queryCache]\n  )\n\n  React.useEffect(() => {\n    queryCaches.push(resolvedQueryCache)\n\n    return () => {\n      // remove the cache from the active list\n      const i = queryCaches.indexOf(resolvedQueryCache)\n      if (i > -1) {\n        queryCaches.splice(i, 1)\n      }\n      // if the resolvedQueryCache was created by us, we need to tear it down\n      if (queryCache == null) {\n        resolvedQueryCache.clear({ notify: false })\n      }\n    }\n  }, [resolvedQueryCache, queryCache])\n\n  return (\n    <queryCacheContext.Provider value={resolvedQueryCache}>\n      {children}\n    </queryCacheContext.Provider>\n  )\n}\n","import React from 'react'\nimport { DEFAULT_CONFIG, defaultConfigRef } from '../core/config'\nimport { ReactQueryConfig } from '../core/types'\nimport { useQueryCache } from './ReactQueryCacheProvider'\n\nconst configContext = React.createContext<ReactQueryConfig | undefined>(\n  undefined\n)\n\nexport function useConfigContext() {\n  const queryCache = useQueryCache()\n  return (\n    React.useContext(configContext) ||\n    queryCache.getDefaultConfig() ||\n    defaultConfigRef.current\n  )\n}\n\nexport interface ReactQueryProviderConfig extends ReactQueryConfig {}\n\nexport interface ReactQueryConfigProviderProps {\n  config: ReactQueryProviderConfig\n}\n\nexport const ReactQueryConfigProvider: React.FC<ReactQueryConfigProviderProps> = ({\n  config,\n  children,\n}) => {\n  const configContextValueOrDefault = useConfigContext()\n  const configContextValue = React.useContext(configContext)\n\n  const newConfig = React.useMemo<ReactQueryConfig>(() => {\n    const { shared = {}, queries = {}, mutations = {} } = config\n    const {\n      shared: contextShared = {},\n      queries: contextQueries = {},\n      mutations: contextMutations = {},\n    } = configContextValueOrDefault\n\n    return {\n      shared: {\n        ...contextShared,\n        ...shared,\n      },\n      queries: {\n        ...contextQueries,\n        ...queries,\n      },\n      mutations: {\n        ...contextMutations,\n        ...mutations,\n      },\n    }\n  }, [config, configContextValueOrDefault])\n\n  React.useEffect(() => {\n    // restore previous config on unmount\n    return () => {\n      defaultConfigRef.current = {\n        ...(configContextValueOrDefault || DEFAULT_CONFIG),\n      }\n    }\n  }, [configContextValueOrDefault])\n\n  // If this is the outermost provider, overwrite the shared default config\n  if (!configContextValue) {\n    defaultConfigRef.current = newConfig\n  }\n\n  return (\n    <configContext.Provider value={newConfig}>\n      {children}\n    </configContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { useConfigContext } from './ReactQueryConfigProvider'\nimport { useGetLatest, useMountedCallback } from './utils'\nimport { Console, uid, getStatusProps } from '../core/utils'\nimport {\n  QueryStatus,\n  MutationResultPair,\n  MutationFunction,\n  MutationConfig,\n  MutateConfig,\n} from '../core/types'\n\n// TYPES\n\ntype Reducer<S, A> = (prevState: S, action: A) => S\n\ninterface State<TResult, TError> {\n  status: QueryStatus\n  data: TResult | undefined\n  error: TError | null\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n}\n\nenum ActionType {\n  Reset = 'Reset',\n  Loading = 'Loading',\n  Resolve = 'Resolve',\n  Reject = 'Reject',\n}\n\ninterface ResetAction {\n  type: ActionType.Reset\n}\n\ninterface LoadingAction {\n  type: ActionType.Loading\n}\n\ninterface ResolveAction<TResult> {\n  type: ActionType.Resolve\n  data: TResult\n}\n\ninterface RejectAction<TError> {\n  type: ActionType.Reject\n  error: TError\n}\n\ntype Action<TResult, TError> =\n  | ResetAction\n  | LoadingAction\n  | ResolveAction<TResult>\n  | RejectAction<TError>\n\n// HOOK\n\nconst getDefaultState = (): State<any, any> => ({\n  ...getStatusProps(QueryStatus.Idle),\n  data: undefined,\n  error: null,\n})\n\nfunction mutationReducer<TResult, TError>(\n  state: State<TResult, TError>,\n  action: Action<TResult, TError>\n): State<TResult, TError> {\n  switch (action.type) {\n    case ActionType.Reset:\n      return getDefaultState()\n    case ActionType.Loading:\n      return {\n        ...getStatusProps(QueryStatus.Loading),\n        data: undefined,\n        error: null,\n      }\n    case ActionType.Resolve:\n      return {\n        ...getStatusProps(QueryStatus.Success),\n        data: action.data,\n        error: null,\n      }\n    case ActionType.Reject:\n      return {\n        ...getStatusProps(QueryStatus.Error),\n        data: undefined,\n        error: action.error,\n      }\n    default:\n      return state\n  }\n}\n\nexport function useMutation<\n  TResult,\n  TError = unknown,\n  TVariables = undefined,\n  TSnapshot = unknown\n>(\n  mutationFn: MutationFunction<TResult, TVariables>,\n  config: MutationConfig<TResult, TError, TVariables, TSnapshot> = {}\n): MutationResultPair<TResult, TError, TVariables, TSnapshot> {\n  const [state, unsafeDispatch] = React.useReducer(\n    mutationReducer as Reducer<State<TResult, TError>, Action<TResult, TError>>,\n    null,\n    getDefaultState\n  )\n\n  const dispatch = useMountedCallback(unsafeDispatch)\n\n  const getMutationFn = useGetLatest(mutationFn)\n\n  const contextConfig = useConfigContext()\n\n  const getConfig = useGetLatest({\n    ...contextConfig.shared,\n    ...contextConfig.mutations,\n    ...config,\n  })\n\n  const latestMutationRef = React.useRef<number>()\n\n  const mutate = React.useCallback(\n    async (\n      variables?: TVariables,\n      mutateConfig: MutateConfig<TResult, TError, TVariables, TSnapshot> = {}\n    ): Promise<TResult | undefined> => {\n      const config = getConfig()\n\n      const mutationId = uid()\n      latestMutationRef.current = mutationId\n\n      const isLatest = () => latestMutationRef.current === mutationId\n\n      let snapshotValue: TSnapshot | undefined\n\n      try {\n        dispatch({ type: ActionType.Loading })\n        snapshotValue = (await config.onMutate?.(variables!)) as TSnapshot\n\n        const data = await getMutationFn()(variables!)\n\n        if (isLatest()) {\n          dispatch({ type: ActionType.Resolve, data })\n        }\n\n        await config.onSuccess?.(data, variables!)\n        await mutateConfig.onSuccess?.(data, variables!)\n        await config.onSettled?.(data, null, variables!)\n        await mutateConfig.onSettled?.(data, null, variables!)\n\n        return data\n      } catch (error) {\n        Console.error(error)\n        await config.onError?.(error, variables!, snapshotValue!)\n        await mutateConfig.onError?.(error, variables!, snapshotValue!)\n        await config.onSettled?.(\n          undefined,\n          error,\n          variables!,\n          snapshotValue as TSnapshot\n        )\n        await mutateConfig.onSettled?.(\n          undefined,\n          error,\n          variables!,\n          snapshotValue\n        )\n\n        if (isLatest()) {\n          dispatch({ type: ActionType.Reject, error })\n        }\n\n        if (mutateConfig.throwOnError ?? config.throwOnError) {\n          throw error\n        }\n\n        return\n      }\n    },\n    [dispatch, getConfig, getMutationFn]\n  )\n\n  const reset = React.useCallback(() => {\n    dispatch({ type: ActionType.Reset })\n  }, [dispatch])\n\n  React.useEffect(() => {\n    const { suspense, useErrorBoundary } = getConfig()\n\n    if ((useErrorBoundary ?? suspense) && state.error) {\n      throw state.error\n    }\n  }, [getConfig, state.error])\n\n  return [mutate, { ...state, reset }]\n}\n","import React from 'react'\n\nimport { uid, isServer } from '../core/utils'\nimport { QueryResultBase, BaseQueryConfig, QueryStatus } from '../core/types'\n\nexport function useUid(): number {\n  const ref = React.useRef(0)\n\n  if (ref.current === null) {\n    ref.current = uid()\n  }\n\n  return ref.current\n}\n\nexport function useGetLatest<T>(obj: T): () => T {\n  const ref = React.useRef<T>(obj)\n  ref.current = obj\n  return React.useCallback(() => ref.current, [])\n}\n\nexport function useMountedCallback<T extends Function>(callback: T): T {\n  const mounted = React.useRef(false)\n\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](() => {\n    mounted.current = true\n    return () => {\n      mounted.current = false\n    }\n  }, [])\n\n  return (React.useCallback(\n    (...args: any[]) => (mounted.current ? callback(...args) : void 0),\n    [callback]\n  ) as any) as T\n}\n\nexport function useRerenderer() {\n  const rerender = useMountedCallback(React.useState<unknown>()[1])\n  return React.useCallback(() => rerender({}), [rerender])\n}\n\nexport function handleSuspense(\n  config: BaseQueryConfig<any, any>,\n  result: QueryResultBase<any, any>\n) {\n  const { error, query } = result\n  const { state } = query\n\n  if (config.suspense || config.useErrorBoundary) {\n    if (state.status === QueryStatus.Error && state.throwInErrorBoundary) {\n      throw error\n    }\n\n    if (\n      config.suspense &&\n      state.status !== QueryStatus.Success &&\n      config.enabled\n    ) {\n      const instance = query.subscribe()\n\n      instance.updateConfig({\n        ...config,\n        onSettled: (data, error) => {\n          instance.unsubscribe(true)\n          config.onSettled?.(data, error)\n        },\n      })\n\n      throw query.fetch()\n    }\n  }\n}\n","import React from 'react'\n\nimport { useRerenderer, useGetLatest } from './utils'\nimport { useQueryCache } from './ReactQueryCacheProvider'\n\nexport function useIsFetching(): number {\n  const queryCache = useQueryCache()\n  const rerender = useRerenderer()\n  const isFetching = queryCache.isFetching\n\n  const getIsFetching = useGetLatest(isFetching)\n\n  React.useEffect(\n    () =>\n      queryCache.subscribe(newCache => {\n        if (getIsFetching() !== newCache.isFetching) {\n          rerender()\n        }\n      }),\n    [getIsFetching, queryCache, rerender]\n  )\n\n  return isFetching\n}\n","import React from 'react'\n\nimport { useQueryCache } from './ReactQueryCacheProvider'\nimport { useRerenderer } from './utils'\nimport { QueryInstance } from '../core/queryInstance'\nimport { QueryConfig, QueryKey, QueryResultBase } from '../core/types'\n\nexport function useBaseQuery<TResult, TError>(\n  queryKey: QueryKey,\n  config: QueryConfig<TResult, TError> = {}\n): QueryResultBase<TResult, TError> {\n  // Make a rerender function\n  const rerender = useRerenderer()\n\n  // Get the query cache\n  const queryCache = useQueryCache()\n\n  // Build the query for use\n  const query = queryCache.buildQuery<TResult, TError>(queryKey, config)\n  const state = query.state\n\n  // Create a query instance ref\n  const instanceRef = React.useRef<QueryInstance<TResult, TError>>()\n\n  // Subscribe to the query when the subscribe function changes\n  React.useEffect(() => {\n    const instance = query.subscribe(() => {\n      rerender()\n    })\n\n    instanceRef.current = instance\n\n    // Unsubscribe when things change\n    return () => instance.unsubscribe()\n  }, [query, rerender])\n\n  // Always update the config\n  React.useEffect(() => {\n    instanceRef.current?.updateConfig(config)\n  })\n\n  const enabledBool = Boolean(config.enabled)\n\n  // Run the instance when the query or enabled change\n  React.useEffect(() => {\n    if (enabledBool && query) {\n      // Just for change detection\n    }\n    instanceRef.current?.run()\n  }, [enabledBool, query])\n\n  const clear = React.useMemo(() => query.clear.bind(query), [query])\n  const refetch = React.useMemo(() => query.refetch.bind(query), [query])\n\n  return {\n    clear,\n    error: state.error,\n    failureCount: state.failureCount,\n    isError: state.isError,\n    isFetching: state.isFetching,\n    isIdle: state.isIdle,\n    isLoading: state.isLoading,\n    isStale: state.isStale,\n    isSuccess: state.isSuccess,\n    query,\n    refetch,\n    status: state.status,\n    updatedAt: state.updatedAt,\n  }\n}\n","import { getQueryArgs } from '../core/utils'\nimport { useConfigContext } from './ReactQueryConfigProvider'\nimport { QueryConfig, QueryKey } from '../core/types'\n\nexport function useQueryArgs<TResult, TError, TOptions = undefined>(\n  args: any[]\n): [QueryKey, QueryConfig<TResult, TError>, TOptions] {\n  const configContext = useConfigContext()\n\n  const [queryKey, config, options] = getQueryArgs<TResult, TError, TOptions>(\n    args\n  )\n\n  // Build the final config\n  const configWithContext = {\n    ...configContext.shared,\n    ...configContext.queries,\n    ...config,\n  } as QueryConfig<TResult, TError>\n\n  return [queryKey, configWithContext, options]\n}\n","import { useBaseQuery } from './useBaseQuery'\nimport { handleSuspense } from './utils'\nimport {\n  QueryConfig,\n  QueryKey,\n  QueryKeyWithoutArray,\n  QueryKeyWithoutObject,\n  QueryKeyWithoutObjectAndArray,\n  QueryResult,\n  TupleQueryFunction,\n  TupleQueryKey,\n} from '../core/types'\nimport { useQueryArgs } from './useQueryArgs'\n\n// TYPES\n\nexport interface UseQueryObjectConfig<\n  TResult,\n  TError,\n  TKey extends TupleQueryKey\n> {\n  queryKey: QueryKey\n  queryFn?: TupleQueryFunction<TResult, [TKey]>\n  config?: QueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function useQuery<TResult, TError, TKey extends QueryKeyWithoutObject>(\n  queryKey: TKey,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useQuery<\n  TResult,\n  TError,\n  TKey extends QueryKeyWithoutObjectAndArray\n>(\n  queryKey: TKey,\n  queryFn: TupleQueryFunction<TResult, [TKey]>,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useQuery<TResult, TError, TKey extends TupleQueryKey>(\n  queryKey: TKey,\n  queryFn: TupleQueryFunction<TResult, TKey>,\n  queryConfig?: QueryConfig<TResult, TError>\n): QueryResult<TResult, TError>\n\n// Object syntax\nexport function useQuery<TResult, TError, TKey extends QueryKeyWithoutArray>(\n  config: UseQueryObjectConfig<TResult, TError, [TKey]>\n): QueryResult<TResult, TError>\n\nexport function useQuery<TResult, TError, TKey extends TupleQueryKey>(\n  config: UseQueryObjectConfig<TResult, TError, TKey>\n): QueryResult<TResult, TError>\n\n// Implementation\nexport function useQuery<TResult, TError>(\n  ...args: any[]\n): QueryResult<TResult, TError> {\n  const [queryKey, config] = useQueryArgs<TResult, TError>(args)\n  const result = useBaseQuery<TResult, TError>(queryKey, config)\n\n  handleSuspense(config, result)\n\n  return {\n    ...result,\n    data: result.query.state.data,\n  }\n}\n","import React from 'react'\n\nimport { useBaseQuery } from './useBaseQuery'\nimport { handleSuspense } from './utils'\nimport { getStatusProps } from '../core/utils'\nimport {\n  PaginatedQueryConfig,\n  PaginatedQueryResult,\n  QueryKey,\n  QueryKeyWithoutArray,\n  QueryKeyWithoutObject,\n  QueryKeyWithoutObjectAndArray,\n  QueryStatus,\n  TupleQueryFunction,\n  TupleQueryKey,\n} from '../core/types'\nimport { useQueryArgs } from './useQueryArgs'\n\n// A paginated query is more like a \"lag\" query, which means\n// as the query key changes, we keep the results from the\n// last query and use them as placeholder data in the next one\n// We DON'T use it as initial data though. That's important\n\n// TYPES\n\nexport interface UsePaginatedQueryObjectConfig<\n  TResult,\n  TError,\n  TKey extends TupleQueryKey\n> {\n  queryKey: QueryKey\n  queryFn?: TupleQueryFunction<TResult, TKey>\n  config?: PaginatedQueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function usePaginatedQuery<\n  TResult,\n  TError,\n  TKey extends QueryKeyWithoutObject\n>(\n  queryKey: TKey,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function usePaginatedQuery<\n  TResult,\n  TError,\n  TKey extends QueryKeyWithoutObjectAndArray\n>(\n  queryKey: TKey,\n  queryFn: TupleQueryFunction<TResult, [TKey]>,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\nexport function usePaginatedQuery<TResult, TError, TKey extends TupleQueryKey>(\n  queryKey: TKey,\n  queryFn: TupleQueryFunction<TResult, TKey>,\n  queryConfig?: PaginatedQueryConfig<TResult, TError>\n): PaginatedQueryResult<TResult, TError>\n\n// Object syntax\nexport function usePaginatedQuery<\n  TResult,\n  TError,\n  TKey extends QueryKeyWithoutArray\n>(\n  config: UsePaginatedQueryObjectConfig<TResult, TError, [TKey]>\n): PaginatedQueryResult<TResult, TError>\n\nexport function usePaginatedQuery<TResult, TError, TKey extends TupleQueryKey>(\n  config: UsePaginatedQueryObjectConfig<TResult, TError, TKey>\n): PaginatedQueryResult<TResult, TError>\n\n// Implementation\nexport function usePaginatedQuery<TResult, TError>(\n  ...args: any[]\n): PaginatedQueryResult<TResult, TError> {\n  const [queryKey, config] = useQueryArgs<TResult, TError>(args)\n\n  // Keep track of the latest data result\n  const lastDataRef = React.useRef<TResult>()\n\n  // If latestData is there, don't use initialData\n  if (typeof lastDataRef.current !== 'undefined') {\n    delete config.initialData\n  }\n\n  // Make the query as normal\n  const result = useBaseQuery<TResult, TError>(queryKey, config)\n\n  // If the query is disabled, get rid of the latest data\n  if (!result.query.config.enabled) {\n    lastDataRef.current = undefined\n  }\n\n  // Get the real data and status from the query\n  const { data: latestData, status } = result.query.state\n\n  // If the real query succeeds, and there is data in it,\n  // update the latest data\n  React.useEffect(() => {\n    if (status === QueryStatus.Success && typeof latestData !== 'undefined') {\n      lastDataRef.current = latestData\n    }\n  }, [latestData, status])\n\n  // Resolved data should be either the real data we're waiting on\n  // or the latest placeholder data\n  let resolvedData = latestData\n  if (typeof resolvedData === 'undefined') {\n    resolvedData = lastDataRef.current\n  }\n\n  // If we have any data at all from either, we\n  // need to make sure the status is success, even though\n  // the real query may still be loading\n  if (typeof resolvedData !== 'undefined') {\n    const overrides = getStatusProps(QueryStatus.Success)\n    Object.assign(result.query.state, overrides)\n    Object.assign(result, overrides)\n  }\n\n  handleSuspense(config, result)\n\n  return {\n    ...result,\n    resolvedData,\n    latestData,\n  }\n}\n","import React from 'react'\n\nimport { useBaseQuery } from './useBaseQuery'\nimport { handleSuspense } from './utils'\nimport {\n  InfiniteQueryConfig,\n  InfiniteQueryResult,\n  QueryKey,\n  QueryKeyWithoutArray,\n  QueryKeyWithoutObject,\n  QueryKeyWithoutObjectAndArray,\n  TupleQueryFunction,\n  TupleQueryKey,\n} from '../core/types'\nimport { useQueryArgs } from './useQueryArgs'\n\n// TYPES\n\nexport interface UseInfiniteQueryObjectConfig<\n  TResult,\n  TError,\n  TKey extends TupleQueryKey\n> {\n  queryKey: QueryKey\n  queryFn?: TupleQueryFunction<TResult, TKey>\n  config?: InfiniteQueryConfig<TResult, TError>\n}\n\n// HOOK\n\n// Parameter syntax with optional config\nexport function useInfiniteQuery<\n  TResult,\n  TError,\n  TKey extends QueryKeyWithoutObject\n>(\n  queryKey: TKey,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Parameter syntax with query function and optional config\nexport function useInfiniteQuery<\n  TResult,\n  TError,\n  TKey extends QueryKeyWithoutObjectAndArray\n>(\n  queryKey: TKey,\n  queryFn: TupleQueryFunction<TResult, [TKey]>,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\nexport function useInfiniteQuery<TResult, TError, TKey extends TupleQueryKey>(\n  queryKey: TKey,\n  queryFn: TupleQueryFunction<TResult, TKey>,\n  queryConfig?: InfiniteQueryConfig<TResult, TError>\n): InfiniteQueryResult<TResult, TError>\n\n// Object syntax\nexport function useInfiniteQuery<\n  TResult,\n  TError,\n  TKey extends QueryKeyWithoutArray\n>(\n  config: UseInfiniteQueryObjectConfig<TResult, TError, [TKey]>\n): InfiniteQueryResult<TResult, TError>\n\nexport function useInfiniteQuery<TResult, TError, TKey extends TupleQueryKey>(\n  config: UseInfiniteQueryObjectConfig<TResult, TError, TKey>\n): InfiniteQueryResult<TResult, TError>\n\n// Implementation\nexport function useInfiniteQuery<TResult, TError>(\n  ...args: any[]\n): InfiniteQueryResult<TResult, TError> {\n  const [queryKey, config] = useQueryArgs<TResult[], TError>(args)\n\n  config.infinite = true\n\n  const result = useBaseQuery<TResult[], TError>(queryKey, config)\n  const query = result.query\n  const state = result.query.state\n\n  handleSuspense(config, result)\n\n  const fetchMore = React.useMemo(() => query.fetchMore.bind(query), [query])\n\n  return {\n    ...result,\n    data: state.data,\n    canFetchMore: state.canFetchMore,\n    fetchMore,\n    isFetching: state.isFetching,\n    isFetchingMore: state.isFetchingMore,\n  }\n}\n"],"names":["QueryStatus","_uid","uid","cancelledError","isServer","window","noop","Console","console","error","warn","log","setConsole","c","functionalUpdate","updater","input","stableStringifyReplacer","_key","value","Error","isObject","Object","keys","sort","reduce","result","key","stableStringify","JSON","stringify","a","Array","isArray","deepIncludes","b","some","isDocumentVisible","document","undefined","includes","visibilityState","getQueryArgs","args","queryKey","queryFn","config","options","equal","deep","depth","length","i","valueOf","prototype","hasOwnProperty","call","getStatusProps","status","isLoading","Loading","isSuccess","Success","isError","isIdle","Idle","DEFAULT_CONFIG","shared","suspense","queries","queryKeySerializerFn","arrayQueryKey","queryHash","parse","enabled","retry","retryDelay","attemptIndex","Math","min","staleTime","cacheTime","refetchOnWindowFocus","refetchInterval","queryFnParamsFilter","d","refetchOnMount","isDataEqual","useErrorBoundary","mutations","throwOnError","defaultConfigRef","current","QueryInstance","query","onStateUpdate","id","stateUpdateListener","clearInterval","this","refetchIntervalId","updateConfig","oldConfig","clearIntervals","minInterval","instances","map","Infinity","setInterval","_this","refetchIntervalInBackground","fetch","run","then","body","recover","e","_this3","state","isFetched","isStale","direct","Promise","resolve","unsubscribe","preventGC","filter","_this4","cancel","scheduleGarbageCollection","action","type","ActionType","onSuccess","data","onSettled","onError","f","arguments","apply","reject","pact","s","o","_settle","bind","v","observer","_Pact","onFulfilled","onRejected","callback","thenable","thrown","finalizer","Query","init","initialData","hasInitialData","initialStatus","queryCache","notifyGlobalListeners","initialStale","isFetching","failureCount","updatedAt","Date","now","infinite","infiniteConfig","infiniteData","canFetchMore","fetchMoreVariable","getFetchMore","Boolean","pageVariables","dispatch","newState","Failed","MarkStale","Fetch","cancelled","throwInErrorBoundary","SetState","queryReducer","forEach","scheduleStaleTimeout","clearStaleTimeout","staleTimeout","setTimeout","invalidate","clearCacheTimeout","cacheTimeout","_this2","clear","refetch","heal","cancelPromises","promise","instance","clearTimeout","clearRetryTimeout","retryTimeout","setState","setData","subscribe","push","tryFetchData","fn","promiseOrValue","_this6","_ref","shouldContinueRetryOnFocus","delay","_this8","fetchMore","originalQueryFn","rebuiltPageVariables","test","awaitBody","_isSettledPact","shouldContinue","_resumeAfterBody","_resumeAfterTest","shift","nextCursor","pageArgs","slice","previous","old","isFetchingMore","newArgs","newData","_async","QueryCache","globalListeners","configRef","defaultConfig","values","acc","getDefaultConfig","listener","splice","indexOf","notify","getQueries","predicate","predicateFn","exact","getQuery","getQueryData","_this$getQuery","removeQueries","cancelQueries","invalidateQueries","refetchActive","refetchInactive","all","err","resetErrorBoundaries","buildQuery","userQueryKey","queryConfig","_this5","frozen","prefetchQuery","configWithoutRetry","_this7","force","setQueryData","defaultQueryCache","makeQueryCache","queryCaches","removePreviousHandler","onWindowFocus","navigator","onLine","catch","setFocusHandler","handleFocus","_window","addEventListener","removeEventListener","queryCacheContext","React","createContext","useQueryCache","useContext","ReactQueryCacheProvider","children","resolvedQueryCache","useMemo","useEffect","Provider","configContext","useConfigContext","ReactQueryConfigProvider","configContextValueOrDefault","configContextValue","newConfig","contextShared","contextQueries","contextMutations","useGetLatest","obj","ref","useRef","useCallback","useMountedCallback","mounted","useRerenderer","rerender","useState","handleSuspense","useIsFetching","getIsFetching","newCache","_await","getDefaultState","mutationReducer","Reset","Resolve","Reject","useMutation","mutationFn","useReducer","getMutationFn","contextConfig","getConfig","latestMutationRef","mutate","variables","mutateConfig","mutationId","snapshotValue","isLatest","onMutate","reset","useBaseQuery","instanceRef","enabledBool","useQueryArgs","useQuery","usePaginatedQuery","lastDataRef","latestData","resolvedData","overrides","assign","useInfiniteQuery"],"mappings":"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"}